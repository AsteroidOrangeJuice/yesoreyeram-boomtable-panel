System.register(["app/core/utils/kbn", "app/core/time_series2", "lodash", "./utils"], function (exports_1, context_1) {
    "use strict";
    var kbn_1, time_series2_1, lodash_1, utils, BoomSeries, BoomTimeBasedThreshold, BoomPattern;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (utils_1) {
                utils = utils_1;
            }
        ],
        execute: function () {
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options) {
                    var _this = this;
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    var nullPointMode = options && options.nullPointMode ? options.nullPointMode : "connected";
                    var row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern = undefined;
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs(nullPointMode);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id;
                    this.currentTimeStamp = new Date();
                    if (series.dataPoints && series.dataPoints.length > 0 && lodash_1.default.last(series.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(series.dataPoints)[1]);
                    }
                    this.pattern = lodash_1.default.find(panelPatterns.filter(function (p) { return p.disabled !== true; }), function (p) { return _this.seriesName.match(p.pattern); }) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (series.stats) {
                        this.value = series.stats[this.pattern.valueName];
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            var decimalInfo = utils.getDecimalsForValue(this.value, this.decimals);
                            var formatFunc = kbn_1.default.valueFormats[this.pattern.format];
                            this.value_formatted = formatFunc(this.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                            this.display_value = String(this.value_formatted);
                        }
                        this.template_value = this.display_value;
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    this.row_name = this.getRowName(this.pattern, row_col_wrapper, this.seriesName.toString());
                    this.col_name = this.getColName(this.pattern, row_col_wrapper, this.seriesName.toString(), this.row_name);
                    this.thresholds = this.getThresholds();
                    this.color_bg = this.getBGColor();
                    this.template_value = this.getDisplayValueTemplate();
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    this.replaceTokens();
                    this.cleanup();
                }
                BoomSeries.prototype.getThresholds = function () {
                    var thresholds = this.pattern.thresholds.split(",").map(function (d) { return +d; });
                    if (this.pattern.enable_time_based_thresholds) {
                        var metricrecivedTimeStamp_1 = this.currentTimeStamp || new Date();
                        var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                        var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                        lodash_1.default.each(this.pattern.time_based_thresholds, function (tbtx) {
                            if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                                (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                                (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                                (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                                tbtx.threshold) {
                                thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                            }
                        });
                    }
                    return thresholds;
                };
                BoomSeries.prototype.getBGColor = function () {
                    var _this = this;
                    var bgColor = "transparent";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        bgColor = this.pattern.null_color || "darkred";
                    }
                    else {
                        if (this.pattern.enable_bgColor) {
                            var list_of_bgColors_based_on_thresholds = this.pattern.bgColors.split("|");
                            bgColor = utils.getItemBasedOnThreshold(this.thresholds, list_of_bgColors_based_on_thresholds, this.value, bgColor);
                        }
                        if (this.pattern.enable_bgColor_overrides && this.pattern.bgColors_overrides !== "") {
                            var _bgColors_overrides = this.pattern.bgColors_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                                bgColor = ("" + _bgColors_overrides[0]).trim();
                            }
                        }
                    }
                    return utils.normalizeColor(bgColor);
                };
                BoomSeries.prototype.getDisplayValueTemplate = function () {
                    var _this = this;
                    var template = this.template_value;
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        template = this.pattern.null_value || "No data";
                    }
                    else {
                        if (this.pattern.enable_transform) {
                            var transform_values = this.pattern.transform_values.split("|");
                            template = utils.getItemBasedOnThreshold(this.thresholds, transform_values, this.value, template);
                        }
                        if (this.pattern.enable_transform_overrides && this.pattern.transform_values_overrides !== "") {
                            var _transform_values_overrides = this.pattern.transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                                template = ("" + _transform_values_overrides[0]).trim();
                            }
                        }
                    }
                    return template;
                };
                BoomSeries.prototype.cleanup = function () {
                    delete this.decimals;
                    delete this.template_col_name;
                    delete this.template_row_name;
                    delete this.template_value;
                    delete this.pattern;
                    delete this.seriesName;
                    delete this.value;
                    delete this.value_formatted;
                    delete this.currentTimeStamp;
                    delete this.thresholds;
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper, seriesName) {
                    var row_name = pattern.row_name;
                    row_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, row_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1) {
                        row_name = seriesName;
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, seriesName, row_name) {
                    var col_name = pattern.col_name;
                    col_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, col_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1 || row_name === seriesName) {
                        col_name = pattern.col_name || "Value";
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.replaceTokens = function () {
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), utils.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), utils.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = utils.replaceTokens(this.row_name);
                    this.col_name = utils.replaceTokens(this.col_name);
                    this.display_value = utils.replaceTokens(this.display_value);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
            BoomTimeBasedThreshold = (function () {
                function BoomTimeBasedThreshold() {
                    this.enabledDays = "Sun,Mon,Tue,Wed,Thu,Fri,Sat";
                    this.from = "0000";
                    this.name = "Early morning of everyday";
                    this.threshold = "70,90";
                    this.to = "0530";
                }
                return BoomTimeBasedThreshold;
            }());
            exports_1("BoomTimeBasedThreshold", BoomTimeBasedThreshold);
            BoomPattern = (function () {
                function BoomPattern(options) {
                    this.row_col_wrapper = "_";
                    if (options && options.row_col_wrapper) {
                        this.row_col_wrapper = options.row_col_wrapper;
                    }
                    this.bgColors = options && options.bgColors ? options.bgColors : "green|orange|red";
                    this.bgColors_overrides = options && options.bgColors_overrides ? options.bgColors_overrides : "0->green|2->red|1->yellow";
                    this.clickable_cells_link = options && options.clickable_cells_link ? options.clickable_cells_link : "";
                    this.col_name = options && options.col_name ? options.col_name : this.row_col_wrapper + "1" + this.row_col_wrapper;
                    this.decimals = options && options.decimals ? options.decimals : 2;
                    this.delimiter = options && options.delimiter ? options.delimiter : ".";
                    this.enable_bgColor = false;
                    this.enable_bgColor_overrides = false;
                    this.enable_clickable_cells = false;
                    this.enable_time_based_thresholds = false;
                    this.enable_transform = false;
                    this.enable_transform_overrides = false;
                    this.filter = {
                        value_above: "",
                        value_below: "",
                    };
                    this.format = options && options.format ? options.format : "none";
                    this.name = options && options.name ? options.name : "New Pattern";
                    this.null_color = options && options.null_color ? options.null_color : "darkred";
                    this.null_value = options && options.null_value ? options.null_value : "No data";
                    this.pattern = options && options.pattern ? options.pattern : "^server.*cpu$";
                    this.row_name = options && options.row_name ? options.row_name : this.row_col_wrapper + "0" + this.row_col_wrapper;
                    this.thresholds = options && options.thresholds ? options.thresholds : "70,90";
                    this.time_based_thresholds = [];
                    this.transform_values = options && options.transform_values ? options.transform_values : "_value_|_value_|_value_";
                    this.transform_values_overrides = options && options.transform_values_overrides ? options.transform_values_overrides : "0->down|1->up";
                    this.valueName = options && options.valueName ? options.valueName : "avg";
                }
                return BoomPattern;
            }());
            exports_1("BoomPattern", BoomPattern);
            BoomPattern.prototype.inverseBGColors = function () {
                this.bgColors = this.bgColors ? this.bgColors.split("|").reverse().join("|") : "";
            };
            BoomPattern.prototype.inverseTransformValues = function () {
                this.transform_values = this.transform_values ? this.transform_values.split("|").reverse().join("|") : "";
            };
            BoomPattern.prototype.add_time_based_thresholds = function () {
                var new_time_based_threshold = new BoomTimeBasedThreshold();
                this.time_based_thresholds = this.time_based_thresholds || [];
                this.time_based_thresholds.push(new_time_based_threshold);
            };
            BoomPattern.prototype.remove_time_based_thresholds = function (index) {
                if (this.time_based_thresholds.length > 0) {
                    this.time_based_thresholds.splice(index, 1);
                }
            };
            BoomPattern.prototype.setUnitFormat = function (format) {
                this.format = format && format.value ? format.value : "none";
            };
        }
    };
});
//# sourceMappingURL=data:application/json;base64,