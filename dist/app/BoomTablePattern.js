System.register([], function (exports_1, context_1) {
    "use strict";
    var BoomTablePattern;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            BoomTablePattern = (function () {
                function BoomTablePattern(options) {
                    this.row_col_wrapper = "_";
                    if (options && options.row_col_wrapper) {
                        this.row_col_wrapper = options.row_col_wrapper;
                    }
                    this.bgColors = options && options.bgColors ? options.bgColors : "green|orange|red";
                    this.bgColors_overrides = options && options.bgColors_overrides ? options.bgColors_overrides : "0->green|2->red|1->yellow";
                    this.clickable_cells_link = options && options.clickable_cells_link ? options.clickable_cells_link : "";
                    this.col_name = options && options.col_name ? options.col_name : this.row_col_wrapper + "1" + this.row_col_wrapper;
                    this.decimals = options && options.decimals ? options.decimals : 2;
                    this.delimiter = options && options.delimiter ? options.delimiter : ".";
                    this.enable_bgColor = false;
                    this.enable_bgColor_overrides = false;
                    this.enable_clickable_cells = false;
                    this.enable_time_based_thresholds = false;
                    this.enable_transform = false;
                    this.enable_transform_overrides = false;
                    this.filter = {
                        value_above: "",
                        value_below: "",
                    };
                    this.format = options && options.format ? options.format : "none";
                    this.name = options && options.name ? options.name : "New Pattern";
                    this.null_color = options && options.null_color ? options.null_color : "darkred";
                    this.null_value = options && options.null_value ? options.null_value : "No data";
                    this.pattern = options && options.pattern ? options.pattern : "^server.*cpu$";
                    this.row_name = options && options.row_name ? options.row_name : this.row_col_wrapper + "0" + this.row_col_wrapper;
                    this.thresholds = options && options.thresholds ? options.thresholds : "70,90";
                    this.time_based_thresholds = [];
                    this.transform_values = options && options.transform_values ? options.transform_values : "_value_|_value_|_value_";
                    this.transform_values_overrides = options && options.transform_values_overrides ? options.transform_values_overrides : "0->down|1->up";
                    this.valueName = options && options.valueName ? options.valueName : "avg";
                }
                return BoomTablePattern;
            }());
            exports_1("BoomTablePattern", BoomTablePattern);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9vbVRhYmxlUGF0dGVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHAvQm9vbVRhYmxlUGF0dGVybi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O1lBQUE7Z0JBNkJJLDBCQUFZLE9BQVk7b0JBNUJoQixvQkFBZSxHQUFXLEdBQUcsQ0FBQztvQkE2QmxDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEVBQUU7d0JBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztxQkFDbEQ7b0JBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7b0JBQ3BGLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO29CQUMzSCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7b0JBQ3hHLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7b0JBQ25ILElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkUsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO29CQUN4RSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztvQkFDNUIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztvQkFDdEMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQztvQkFDcEMsSUFBSSxDQUFDLDRCQUE0QixHQUFHLEtBQUssQ0FBQztvQkFDMUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztvQkFDOUIsSUFBSSxDQUFDLDBCQUEwQixHQUFHLEtBQUssQ0FBQztvQkFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBRzt3QkFDVixXQUFXLEVBQUUsRUFBRTt3QkFDZixXQUFXLEVBQUUsRUFBRTtxQkFDbEIsQ0FBQztvQkFDRixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7b0JBQ2xFLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztvQkFDbkUsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO29CQUNqRixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ2pGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQztvQkFDOUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztvQkFDbkgsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO29CQUMvRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsRUFBRSxDQUFDO29CQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQztvQkFDbkgsSUFBSSxDQUFDLDBCQUEwQixHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO29CQUN2SSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQzlFLENBQUM7Z0JBQ0wsdUJBQUM7WUFBRCxDQUFDLEFBN0RELElBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQm9vbVRhYmxlUGF0dGVybiB7XHJcbiAgICBwcml2YXRlIHJvd19jb2xfd3JhcHBlcjogU3RyaW5nID0gXCJfXCI7XHJcbiAgICBwdWJsaWMgYmdDb2xvcnM6IFN0cmluZztcclxuICAgIHB1YmxpYyBiZ0NvbG9yc19vdmVycmlkZXM6IFN0cmluZztcclxuICAgIHB1YmxpYyBjbGlja2FibGVfY2VsbHNfbGluazogU3RyaW5nO1xyXG4gICAgcHVibGljIGNvbF9uYW1lOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgZGVjaW1hbHM6IE51bWJlcjtcclxuICAgIHB1YmxpYyBkZWxpbWl0ZXI6IFN0cmluZztcclxuICAgIHB1YmxpYyBlbmFibGVfYmdDb2xvcjogQm9vbGVhbjtcclxuICAgIHB1YmxpYyBlbmFibGVfYmdDb2xvcl9vdmVycmlkZXM6IEJvb2xlYW47XHJcbiAgICBwdWJsaWMgZW5hYmxlX2NsaWNrYWJsZV9jZWxsczogQm9vbGVhbjtcclxuICAgIHB1YmxpYyBlbmFibGVfdGltZV9iYXNlZF90aHJlc2hvbGRzOiBCb29sZWFuO1xyXG4gICAgcHVibGljIGVuYWJsZV90cmFuc2Zvcm06IEJvb2xlYW47XHJcbiAgICBwdWJsaWMgZW5hYmxlX3RyYW5zZm9ybV9vdmVycmlkZXM6IEJvb2xlYW47XHJcbiAgICBwdWJsaWMgZmlsdGVyOiB7XHJcbiAgICAgICAgdmFsdWVfYWJvdmU6IFN0cmluZztcclxuICAgICAgICB2YWx1ZV9iZWxvdzogU3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHB1YmxpYyBmb3JtYXQ6IFN0cmluZztcclxuICAgIHB1YmxpYyBuYW1lOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgbnVsbF9jb2xvcjogU3RyaW5nO1xyXG4gICAgcHVibGljIG51bGxfdmFsdWU6IFN0cmluZztcclxuICAgIHB1YmxpYyBwYXR0ZXJuOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgcm93X25hbWU6IFN0cmluZztcclxuICAgIHB1YmxpYyB0aHJlc2hvbGRzOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgdGltZV9iYXNlZF90aHJlc2hvbGRzOiBhbnlbXTtcclxuICAgIHB1YmxpYyB0cmFuc2Zvcm1fdmFsdWVzOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgdHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXM6IFN0cmluZztcclxuICAgIHB1YmxpYyB2YWx1ZU5hbWU6IFN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFueSkge1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucm93X2NvbF93cmFwcGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm93X2NvbF93cmFwcGVyID0gb3B0aW9ucy5yb3dfY29sX3dyYXBwZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmdDb2xvcnMgPSBvcHRpb25zICYmIG9wdGlvbnMuYmdDb2xvcnMgPyBvcHRpb25zLmJnQ29sb3JzIDogXCJncmVlbnxvcmFuZ2V8cmVkXCI7XHJcbiAgICAgICAgdGhpcy5iZ0NvbG9yc19vdmVycmlkZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuYmdDb2xvcnNfb3ZlcnJpZGVzID8gb3B0aW9ucy5iZ0NvbG9yc19vdmVycmlkZXMgOiBcIjAtPmdyZWVufDItPnJlZHwxLT55ZWxsb3dcIjtcclxuICAgICAgICB0aGlzLmNsaWNrYWJsZV9jZWxsc19saW5rID0gb3B0aW9ucyAmJiBvcHRpb25zLmNsaWNrYWJsZV9jZWxsc19saW5rID8gb3B0aW9ucy5jbGlja2FibGVfY2VsbHNfbGluayA6IFwiXCI7XHJcbiAgICAgICAgdGhpcy5jb2xfbmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jb2xfbmFtZSA/IG9wdGlvbnMuY29sX25hbWUgOiB0aGlzLnJvd19jb2xfd3JhcHBlciArIFwiMVwiICsgdGhpcy5yb3dfY29sX3dyYXBwZXI7XHJcbiAgICAgICAgdGhpcy5kZWNpbWFscyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWNpbWFscyA/IG9wdGlvbnMuZGVjaW1hbHMgOiAyO1xyXG4gICAgICAgIHRoaXMuZGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciA/IG9wdGlvbnMuZGVsaW1pdGVyIDogXCIuXCI7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfYmdDb2xvciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlX2JnQ29sb3Jfb3ZlcnJpZGVzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfY2xpY2thYmxlX2NlbGxzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfdGltZV9iYXNlZF90aHJlc2hvbGRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfdHJhbnNmb3JtID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVfdHJhbnNmb3JtX292ZXJyaWRlcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyID0ge1xyXG4gICAgICAgICAgICB2YWx1ZV9hYm92ZTogXCJcIixcclxuICAgICAgICAgICAgdmFsdWVfYmVsb3c6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZvcm1hdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5mb3JtYXQgPyBvcHRpb25zLmZvcm1hdCA6IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lID8gb3B0aW9ucy5uYW1lIDogXCJOZXcgUGF0dGVyblwiO1xyXG4gICAgICAgIHRoaXMubnVsbF9jb2xvciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5udWxsX2NvbG9yID8gb3B0aW9ucy5udWxsX2NvbG9yIDogXCJkYXJrcmVkXCI7XHJcbiAgICAgICAgdGhpcy5udWxsX3ZhbHVlID0gb3B0aW9ucyAmJiBvcHRpb25zLm51bGxfdmFsdWUgPyBvcHRpb25zLm51bGxfdmFsdWUgOiBcIk5vIGRhdGFcIjtcclxuICAgICAgICB0aGlzLnBhdHRlcm4gPSBvcHRpb25zICYmIG9wdGlvbnMucGF0dGVybiA/IG9wdGlvbnMucGF0dGVybiA6IFwiXnNlcnZlci4qY3B1JFwiO1xyXG4gICAgICAgIHRoaXMucm93X25hbWUgPSBvcHRpb25zICYmIG9wdGlvbnMucm93X25hbWUgPyBvcHRpb25zLnJvd19uYW1lIDogdGhpcy5yb3dfY29sX3dyYXBwZXIgKyBcIjBcIiArIHRoaXMucm93X2NvbF93cmFwcGVyO1xyXG4gICAgICAgIHRoaXMudGhyZXNob2xkcyA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aHJlc2hvbGRzID8gb3B0aW9ucy50aHJlc2hvbGRzIDogXCI3MCw5MFwiO1xyXG4gICAgICAgIHRoaXMudGltZV9iYXNlZF90aHJlc2hvbGRzID0gW107XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1fdmFsdWVzID0gb3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zZm9ybV92YWx1ZXMgPyBvcHRpb25zLnRyYW5zZm9ybV92YWx1ZXMgOiBcIl92YWx1ZV98X3ZhbHVlX3xfdmFsdWVfXCI7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1fdmFsdWVzX292ZXJyaWRlcyA9IG9wdGlvbnMgJiYgb3B0aW9ucy50cmFuc2Zvcm1fdmFsdWVzX292ZXJyaWRlcyA/IG9wdGlvbnMudHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMgOiBcIjAtPmRvd258MS0+dXBcIjtcclxuICAgICAgICB0aGlzLnZhbHVlTmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy52YWx1ZU5hbWUgPyBvcHRpb25zLnZhbHVlTmFtZSA6IFwiYXZnXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBCb29tVGFibGVQYXR0ZXJuXHJcbn07XHJcbiJdfQ==