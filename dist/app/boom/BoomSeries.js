System.register(["app/core/utils/kbn", "app/core/time_series2", "lodash", "./index"], function (exports_1, context_1) {
    "use strict";
    var kbn_1, time_series2_1, lodash_1, index_1, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            }
        ],
        execute: function () {
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options) {
                    var _this = this;
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    var nullPointMode = options && options.nullPointMode ? options.nullPointMode : "connected";
                    var row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern = undefined;
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs(nullPointMode);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id;
                    this.currentTimeStamp = new Date();
                    if (series.dataPoints && series.dataPoints.length > 0 && lodash_1.default.last(series.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(series.dataPoints)[1]);
                    }
                    this.pattern = lodash_1.default.find(panelPatterns.filter(function (p) { return p.disabled !== true; }), function (p) { return _this.seriesName.match(p.pattern); }) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (series.stats) {
                        this.value = series.stats[this.pattern.valueName];
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            var decimalInfo = index_1.getDecimalsForValue(this.value, this.decimals);
                            var formatFunc = kbn_1.default.valueFormats[this.pattern.format];
                            this.value_formatted = formatFunc(this.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                            this.display_value = String(this.value_formatted);
                        }
                        this.template_value = this.display_value;
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    this.row_name = this.getRowName(this.pattern, row_col_wrapper, this.seriesName.toString());
                    this.col_name = this.getColName(this.pattern, row_col_wrapper, this.seriesName.toString(), this.row_name);
                    this.thresholds = this.getThresholds();
                    this.color_bg = this.getBGColor();
                    this.color_text = this.getTextColor();
                    this.template_value = this.getDisplayValueTemplate();
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    this.replaceTokens();
                    this.cleanup();
                }
                BoomSeries.prototype.getThresholds = function () {
                    var thresholds = this.pattern.thresholds.split(",").map(function (d) { return +d; });
                    if (this.pattern.enable_time_based_thresholds) {
                        var metricrecivedTimeStamp_1 = this.currentTimeStamp || new Date();
                        var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                        var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                        lodash_1.default.each(this.pattern.time_based_thresholds, function (tbtx) {
                            if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                                (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                                (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                                (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                                tbtx.threshold) {
                                thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                            }
                        });
                    }
                    return thresholds;
                };
                BoomSeries.prototype.getBGColor = function () {
                    var _this = this;
                    var bgColor = "transparent";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        bgColor = this.pattern.null_color || "darkred";
                    }
                    else {
                        if (this.pattern.enable_bgColor && this.pattern.bgColors) {
                            var list_of_bgColors_based_on_thresholds = this.pattern.bgColors.split("|");
                            bgColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_bgColors_based_on_thresholds, this.value, bgColor);
                        }
                        if (this.pattern.enable_bgColor_overrides && this.pattern.bgColors_overrides !== "") {
                            var _bgColors_overrides = this.pattern.bgColors_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                                bgColor = ("" + _bgColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(bgColor);
                };
                BoomSeries.prototype.getTextColor = function () {
                    var _this = this;
                    var textColor = "white";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        textColor = this.pattern.null_textcolor || "white";
                    }
                    else {
                        if (this.pattern.enable_textColor && this.pattern.textColors) {
                            var list_of_textColors_based_on_thresholds = this.pattern.textColors.split("|");
                            textColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_textColors_based_on_thresholds, this.value, textColor);
                        }
                        if (this.pattern.enable_textColor_overrides && this.pattern.textColors_overrides !== "") {
                            var _textColors_overrides = this.pattern.textColors_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                                textColor = ("" + _textColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(textColor);
                };
                BoomSeries.prototype.getDisplayValueTemplate = function () {
                    var _this = this;
                    var template = this.template_value;
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        template = this.pattern.null_value || "No data";
                    }
                    else {
                        if (this.pattern.enable_transform) {
                            var transform_values = this.pattern.transform_values.split("|");
                            template = index_1.getItemBasedOnThreshold(this.thresholds, transform_values, this.value, template);
                        }
                        if (this.pattern.enable_transform_overrides && this.pattern.transform_values_overrides !== "") {
                            var _transform_values_overrides = this.pattern.transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                                template = ("" + _transform_values_overrides[0]).trim();
                            }
                        }
                    }
                    return template;
                };
                BoomSeries.prototype.cleanup = function () {
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.value;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_col_name;
                        delete this.template_row_name;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper, seriesName) {
                    var row_name = pattern.row_name;
                    row_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, row_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1) {
                        row_name = seriesName;
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, seriesName, row_name) {
                    var col_name = pattern.col_name;
                    col_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, col_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1 || row_name === seriesName) {
                        col_name = pattern.col_name || "Value";
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.replaceTokens = function () {
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9vbVNlcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvYm9vbS9Cb29tU2VyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBT0E7Z0JBb0JJLG9CQUFZLFVBQWUsRUFBRSxtQkFBd0IsRUFBRSxhQUFvQixFQUFFLE9BQVk7b0JBQXpGLGlCQXVEQztvQkE5RE0sa0JBQWEsR0FBRyxHQUFHLENBQUM7b0JBQ3BCLFlBQU8sR0FBRyxHQUFHLENBQUM7b0JBQ2QsVUFBSyxHQUFHLEdBQUcsQ0FBQztvQkFDWixvQkFBZSxHQUFHLEdBQUcsQ0FBQztvQkFDdEIsU0FBSSxHQUFHLEdBQUcsQ0FBQztvQkFJZCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hFLElBQUksYUFBYSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQzNGLElBQUksZUFBZSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7b0JBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO29CQUNyQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO29CQUM1QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO29CQUM1QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztvQkFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO29CQUN6QixJQUFJLE1B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QyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNuSCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztvQkFDM0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7b0JBQ2pGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO29CQUU3RixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUM3QyxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUM3QyxJQUFJLENBQUMsYUFBYSxHQUFHLHFCQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMzRCxDQUFDO2dCQUNMLGlCQUFDO1lBQUQsQ0FBQyxBQTFORCxJQTBOQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ncmFmYW5hLXNkay1tb2Nrcy9hcHAvaGVhZGVycy9jb21tb24uZC50c1wiIC8+XHJcblxyXG5pbXBvcnQga2JuIGZyb20gJ2FwcC9jb3JlL3V0aWxzL2tibic7XHJcbmltcG9ydCBUaW1lU2VyaWVzIGZyb20gXCJhcHAvY29yZS90aW1lX3NlcmllczJcIjtcclxuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgeyBJQm9vbVNlcmllcywgcmVwbGFjZVRva2VucywgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnMsIGdldERlY2ltYWxzRm9yVmFsdWUsIGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkLCBub3JtYWxpemVDb2xvciB9IGZyb20gXCIuL2luZGV4XCI7XHJcblxyXG5jbGFzcyBCb29tU2VyaWVzIGltcGxlbWVudHMgSUJvb21TZXJpZXMge1xyXG4gICAgcHJpdmF0ZSBkZWJ1Z19tb2RlOiBCb29sZWFuO1xyXG4gICAgcHJpdmF0ZSBwYXR0ZXJuOiBhbnk7XHJcbiAgICBwcml2YXRlIHNlcmllc05hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgY3VycmVudFRpbWVTdGFtcDogRGF0ZTtcclxuICAgIHByaXZhdGUgdGVtcGxhdGVfcm93X25hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgdGVtcGxhdGVfY29sX25hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgdGVtcGxhdGVfdmFsdWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgZGVjaW1hbHM6IE51bWJlcjtcclxuICAgIHB1YmxpYyBjb2xfbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHJvd19uYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgY29sb3JfYmc6IHN0cmluZztcclxuICAgIHB1YmxpYyBjb2xvcl90ZXh0OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgZGlzcGxheV92YWx1ZSA9IFwiLVwiO1xyXG4gICAgcHVibGljIHRvb2x0aXAgPSBcIi1cIjtcclxuICAgIHB1YmxpYyB2YWx1ZSA9IE5hTjtcclxuICAgIHB1YmxpYyB2YWx1ZV9mb3JtYXR0ZWQgPSBcIi1cIjtcclxuICAgIHB1YmxpYyBsaW5rID0gXCItXCI7XHJcbiAgICBwdWJsaWMgdGhyZXNob2xkczogTnVtYmVyW107XHJcbiAgICBwdWJsaWMgaGlkZGVuOiBCb29sZWFuO1xyXG4gICAgY29uc3RydWN0b3Ioc2VyaWVzRGF0YTogYW55LCBwYW5lbERlZmF1bHRQYXR0ZXJuOiBhbnksIHBhbmVsUGF0dGVybnM6IGFueVtdLCBvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRlYnVnX21vZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVidWdfbW9kZSA9PT0gdHJ1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICBsZXQgbnVsbFBvaW50TW9kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5udWxsUG9pbnRNb2RlID8gb3B0aW9ucy5udWxsUG9pbnRNb2RlIDogXCJjb25uZWN0ZWRcIjtcclxuICAgICAgICBsZXQgcm93X2NvbF93cmFwcGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLnJvd19jb2xfd3JhcHBlciA/IG9wdGlvbnMucm93X2NvbF93cmFwcGVyIDogXCJfXCI7XHJcbiAgICAgICAgdGhpcy5zZXJpZXNOYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlX3Jvd19uYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlX2NvbF9uYW1lID0gXCJcIjtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlX3ZhbHVlID0gXCJcIjtcclxuICAgICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGF0dGVybiA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc2VyaWVzID0gbmV3IFRpbWVTZXJpZXMoe1xyXG4gICAgICAgICAgICBhbGlhczogc2VyaWVzRGF0YS50YXJnZXQsXHJcbiAgICAgICAgICAgIGRhdGFwb2ludHM6IHNlcmllc0RhdGEuZGF0YXBvaW50cyB8fCBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNlcmllcy5mbG90cGFpcnMgPSBzZXJpZXMuZ2V0RmxvdFBhaXJzKG51bGxQb2ludE1vZGUpO1xyXG4gICAgICAgIHRoaXMuc2VyaWVzTmFtZSA9IHNlcmllcy5hbGlhcyB8fCBzZXJpZXMuYWxpYXNFc2NhcGVkIHx8IHNlcmllcy5sYWJlbCB8fCBzZXJpZXMuaWQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZVN0YW1wID0gbmV3IERhdGUoKTtcclxuICAgICAgICBpZiAoc2VyaWVzLmRhdGFQb2ludHMgJiYgc2VyaWVzLmRhdGFQb2ludHMubGVuZ3RoID4gMCAmJiBfLmxhc3Qoc2VyaWVzLmRhdGFQb2ludHMpLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lU3RhbXAgPSBuZXcgRGF0ZShfLmxhc3Qoc2VyaWVzLmRhdGFQb2ludHMpWzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYXR0ZXJuID0gXy5maW5kKHBhbmVsUGF0dGVybnMuZmlsdGVyKHAgPT4geyByZXR1cm4gcC5kaXNhYmxlZCAhPT0gdHJ1ZTsgfSksIHAgPT4gdGhpcy5zZXJpZXNOYW1lLm1hdGNoKHAucGF0dGVybikpIHx8IHBhbmVsRGVmYXVsdFBhdHRlcm47XHJcbiAgICAgICAgdGhpcy5kZWNpbWFscyA9IHRoaXMucGF0dGVybi5kZWNpbWFscyB8fCBwYW5lbERlZmF1bHRQYXR0ZXJuLmRlY2ltYWxzIHx8IDI7XHJcbiAgICAgICAgaWYgKHNlcmllcy5zdGF0cykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gc2VyaWVzLnN0YXRzW3RoaXMucGF0dGVybi52YWx1ZU5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoXy5pc05hTih0aGlzLnZhbHVlKSB8fCB0aGlzLnZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlfdmFsdWUgPSB0aGlzLnBhdHRlcm4ubnVsbF92YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IFN0cmluZyh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVjaW1hbEluZm86IGFueSA9IGdldERlY2ltYWxzRm9yVmFsdWUodGhpcy52YWx1ZSwgdGhpcy5kZWNpbWFscyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm9ybWF0RnVuYyA9IGtibi52YWx1ZUZvcm1hdHNbdGhpcy5wYXR0ZXJuLmZvcm1hdF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlX2Zvcm1hdHRlZCA9IGZvcm1hdEZ1bmModGhpcy52YWx1ZSwgZGVjaW1hbEluZm8uZGVjaW1hbHMsIGRlY2ltYWxJbmZvLnNjYWxlZERlY2ltYWxzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IFN0cmluZyh0aGlzLnZhbHVlX2Zvcm1hdHRlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy5wYXR0ZXJuICYmIHRoaXMucGF0dGVybi5maWx0ZXIgJiYgKHRoaXMucGF0dGVybi5maWx0ZXIudmFsdWVfYmVsb3cgIT09IFwiXCIgfHwgdGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9hYm92ZSAhPT0gXCJcIikpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5maWx0ZXIudmFsdWVfYmVsb3cgIT09IFwiXCIgJiYgdGhpcy52YWx1ZSA8ICsodGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9iZWxvdykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9hYm92ZSAhPT0gXCJcIiAmJiB0aGlzLnZhbHVlID4gKyh0aGlzLnBhdHRlcm4uZmlsdGVyLnZhbHVlX2Fib3ZlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm93X25hbWUgPSB0aGlzLmdldFJvd05hbWUodGhpcy5wYXR0ZXJuLCByb3dfY29sX3dyYXBwZXIsIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLmNvbF9uYW1lID0gdGhpcy5nZXRDb2xOYW1lKHRoaXMucGF0dGVybiwgcm93X2NvbF93cmFwcGVyLCB0aGlzLnNlcmllc05hbWUudG9TdHJpbmcoKSwgdGhpcy5yb3dfbmFtZSk7XHJcbiAgICAgICAgdGhpcy50aHJlc2hvbGRzID0gdGhpcy5nZXRUaHJlc2hvbGRzKCk7XHJcbiAgICAgICAgdGhpcy5jb2xvcl9iZyA9IHRoaXMuZ2V0QkdDb2xvcigpO1xyXG4gICAgICAgIHRoaXMuY29sb3JfdGV4dCA9IHRoaXMuZ2V0VGV4dENvbG9yKCk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZV92YWx1ZSA9IHRoaXMuZ2V0RGlzcGxheVZhbHVlVGVtcGxhdGUoKTtcclxuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnBhdHRlcm4udG9vbHRpcFRlbXBsYXRlIHx8IFwiU2VyaWVzIDogX3Nlcmllc18gPGJyLz5Sb3cgTmFtZSA6IF9yb3dfbmFtZV8gPGJyLz5Db2wgTmFtZSA6IF9jb2xfbmFtZV8gPGJyLz5WYWx1ZSA6IF92YWx1ZV9cIjtcclxuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLnBhdHRlcm4uZW5hYmxlX2NsaWNrYWJsZV9jZWxscyA/IHRoaXMucGF0dGVybi5jbGlja2FibGVfY2VsbHNfbGluayB8fCBcIiNcIiA6IFwiI1wiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZVRva2VucygpO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRUaHJlc2hvbGRzKCkge1xyXG4gICAgICAgIGxldCB0aHJlc2hvbGRzID0gdGhpcy5wYXR0ZXJuLnRocmVzaG9sZHMuc3BsaXQoXCIsXCIpLm1hcChkID0+ICtkKTtcclxuICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV90aW1lX2Jhc2VkX3RocmVzaG9sZHMpIHtcclxuICAgICAgICAgICAgbGV0IG1ldHJpY3JlY2l2ZWRUaW1lU3RhbXAgPSB0aGlzLmN1cnJlbnRUaW1lU3RhbXAgfHwgbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgbGV0IG1ldHJpY3JlY2l2ZWRUaW1lU3RhbXBfaW5udW1iZXIgPSBtZXRyaWNyZWNpdmVkVGltZVN0YW1wLmdldEhvdXJzKCkgKiAxMDAgKyBtZXRyaWNyZWNpdmVkVGltZVN0YW1wLmdldE1pbnV0ZXMoKTtcclxuICAgICAgICAgICAgbGV0IHdlZWtkYXlzID0gW1wic3VuXCIsIFwibW9uXCIsIFwidHVlXCIsIFwid2VkXCIsIFwidGh1XCIsIFwiZnJpXCIsIFwic2F0XCJdO1xyXG4gICAgICAgICAgICBfLmVhY2godGhpcy5wYXR0ZXJuLnRpbWVfYmFzZWRfdGhyZXNob2xkcywgKHRidHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YnR4ICYmIHRidHguZnJvbSAmJiB0YnR4LnRvICYmIHRidHguZW5hYmxlZERheXMgJiZcclxuICAgICAgICAgICAgICAgICAgICAobWV0cmljcmVjaXZlZFRpbWVTdGFtcF9pbm51bWJlciA+PSArKHRidHguZnJvbSkpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKG1ldHJpY3JlY2l2ZWRUaW1lU3RhbXBfaW5udW1iZXIgPD0gKyh0YnR4LnRvKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAodGJ0eC5lbmFibGVkRGF5cy50b0xvd2VyQ2FzZSgpLmluZGV4T2Yod2Vla2RheXNbbWV0cmljcmVjaXZlZFRpbWVTdGFtcC5nZXREYXkoKV0pID4gLTEpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdGJ0eC50aHJlc2hvbGRcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZHMgPSAodGJ0eC50aHJlc2hvbGQgKyBcIlwiKS5zcGxpdChcIixcIikubWFwKGQgPT4gK2QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHM7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldEJHQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgYmdDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcclxuICAgICAgICBpZiAoXy5pc05hTih0aGlzLnZhbHVlKSB8fCB0aGlzLnZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJnQ29sb3IgPSB0aGlzLnBhdHRlcm4ubnVsbF9jb2xvciB8fCBcImRhcmtyZWRcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV9iZ0NvbG9yICYmIHRoaXMucGF0dGVybi5iZ0NvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpc3Rfb2ZfYmdDb2xvcnNfYmFzZWRfb25fdGhyZXNob2xkcyA9IHRoaXMucGF0dGVybi5iZ0NvbG9ycy5zcGxpdChcInxcIik7XHJcbiAgICAgICAgICAgICAgICBiZ0NvbG9yID0gZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQodGhpcy50aHJlc2hvbGRzLCBsaXN0X29mX2JnQ29sb3JzX2Jhc2VkX29uX3RocmVzaG9sZHMsIHRoaXMudmFsdWUsIGJnQ29sb3IpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV9iZ0NvbG9yX292ZXJyaWRlcyAmJiB0aGlzLnBhdHRlcm4uYmdDb2xvcnNfb3ZlcnJpZGVzICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgX2JnQ29sb3JzX292ZXJyaWRlcyA9IHRoaXMucGF0dGVybi5iZ0NvbG9yc19vdmVycmlkZXMuc3BsaXQoXCJ8XCIpLmZpbHRlcihjb24gPT4gY29uLmluZGV4T2YoXCItPlwiKSkubWFwKGNvbiA9PiBjb24uc3BsaXQoXCItPlwiKSkuZmlsdGVyKGNvbiA9PiArKGNvblswXSkgPT09IHRoaXMudmFsdWUpLm1hcChjb24gPT4gY29uWzFdKTtcclxuICAgICAgICAgICAgICAgIGlmIChfYmdDb2xvcnNfb3ZlcnJpZGVzLmxlbmd0aCA+IDAgJiYgX2JnQ29sb3JzX292ZXJyaWRlc1swXSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJnQ29sb3IgPSAoXCJcIiArIF9iZ0NvbG9yc19vdmVycmlkZXNbMF0pLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplQ29sb3IoYmdDb2xvcik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldFRleHRDb2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB0ZXh0Q29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgaWYgKF8uaXNOYU4odGhpcy52YWx1ZSkgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSB0aGlzLnBhdHRlcm4ubnVsbF90ZXh0Y29sb3IgfHwgXCJ3aGl0ZVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdHRlcm4uZW5hYmxlX3RleHRDb2xvciAmJiB0aGlzLnBhdHRlcm4udGV4dENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpc3Rfb2ZfdGV4dENvbG9yc19iYXNlZF9vbl90aHJlc2hvbGRzID0gdGhpcy5wYXR0ZXJuLnRleHRDb2xvcnMuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICAgICAgdGV4dENvbG9yID0gZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQodGhpcy50aHJlc2hvbGRzLCBsaXN0X29mX3RleHRDb2xvcnNfYmFzZWRfb25fdGhyZXNob2xkcywgdGhpcy52YWx1ZSwgdGV4dENvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV90ZXh0Q29sb3Jfb3ZlcnJpZGVzICYmIHRoaXMucGF0dGVybi50ZXh0Q29sb3JzX292ZXJyaWRlcyAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IF90ZXh0Q29sb3JzX292ZXJyaWRlcyA9IHRoaXMucGF0dGVybi50ZXh0Q29sb3JzX292ZXJyaWRlcy5zcGxpdChcInxcIikuZmlsdGVyKGNvbiA9PiBjb24uaW5kZXhPZihcIi0+XCIpKS5tYXAoY29uID0+IGNvbi5zcGxpdChcIi0+XCIpKS5maWx0ZXIoY29uID0+ICsoY29uWzBdKSA9PT0gdGhpcy52YWx1ZSkubWFwKGNvbiA9PiBjb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90ZXh0Q29sb3JzX292ZXJyaWRlcy5sZW5ndGggPiAwICYmIF90ZXh0Q29sb3JzX292ZXJyaWRlc1swXSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRDb2xvciA9IChcIlwiICsgX3RleHRDb2xvcnNfb3ZlcnJpZGVzWzBdKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUNvbG9yKHRleHRDb2xvcik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldERpc3BsYXlWYWx1ZVRlbXBsYXRlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZV92YWx1ZTtcclxuICAgICAgICBpZiAoXy5pc05hTih0aGlzLnZhbHVlKSB8fCB0aGlzLnZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGhpcy5wYXR0ZXJuLm51bGxfdmFsdWUgfHwgXCJObyBkYXRhXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfdHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtX3ZhbHVlcyA9IHRoaXMucGF0dGVybi50cmFuc2Zvcm1fdmFsdWVzLnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQodGhpcy50aHJlc2hvbGRzLCB0cmFuc2Zvcm1fdmFsdWVzLCB0aGlzLnZhbHVlLCB0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfdHJhbnNmb3JtX292ZXJyaWRlcyAmJiB0aGlzLnBhdHRlcm4udHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBfdHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMgPSB0aGlzLnBhdHRlcm4udHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMuc3BsaXQoXCJ8XCIpLmZpbHRlcihjb24gPT4gY29uLmluZGV4T2YoXCItPlwiKSkubWFwKGNvbiA9PiBjb24uc3BsaXQoXCItPlwiKSkuZmlsdGVyKGNvbiA9PiArKGNvblswXSkgPT09IHRoaXMudmFsdWUpLm1hcChjb24gPT4gY29uWzFdKTtcclxuICAgICAgICAgICAgICAgIGlmIChfdHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMubGVuZ3RoID4gMCAmJiBfdHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXNbMF0gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IChcIlwiICsgX3RyYW5zZm9ybV92YWx1ZXNfb3ZlcnJpZGVzWzBdKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjbGVhbnVwKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnX21vZGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2VyaWVzTmFtZTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBhdHRlcm47XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRocmVzaG9sZHM7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRlY2ltYWxzO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy50ZW1wbGF0ZV9jb2xfbmFtZTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudGVtcGxhdGVfcm93X25hbWU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRlbXBsYXRlX3ZhbHVlO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy52YWx1ZV9mb3JtYXR0ZWQ7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRUaW1lU3RhbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRSb3dOYW1lKHBhdHRlcm4sIHJvd19jb2xfd3JhcHBlcjogc3RyaW5nLCBzZXJpZXNOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByb3dfbmFtZSA9IHBhdHRlcm4ucm93X25hbWU7XHJcbiAgICAgICAgcm93X25hbWUgPSBzZXJpZXNOYW1lLnNwbGl0KHBhdHRlcm4uZGVsaW1pdGVyIHx8IFwiLlwiKS5yZWR1Y2UoKHIsIGl0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByLnJlcGxhY2UobmV3IFJlZ0V4cChyb3dfY29sX3dyYXBwZXIgKyBpICsgcm93X2NvbF93cmFwcGVyLCBcImdcIiksIGl0KTtcclxuICAgICAgICB9LCByb3dfbmFtZSk7XHJcbiAgICAgICAgaWYgKHNlcmllc05hbWUuc3BsaXQocGF0dGVybi5kZWxpbWl0ZXIgfHwgXCIuXCIpLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByb3dfbmFtZSA9IHNlcmllc05hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGVtcGxhdGVfcm93X25hbWUgPSByb3dfbmFtZTtcclxuICAgICAgICByZXR1cm4gcm93X25hbWU7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldENvbE5hbWUocGF0dGVybiwgcm93X2NvbF93cmFwcGVyOiBzdHJpbmcsIHNlcmllc05hbWU6IHN0cmluZywgcm93X25hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGNvbF9uYW1lID0gcGF0dGVybi5jb2xfbmFtZTtcclxuICAgICAgICBjb2xfbmFtZSA9IHNlcmllc05hbWUuc3BsaXQocGF0dGVybi5kZWxpbWl0ZXIgfHwgXCIuXCIpLnJlZHVjZSgociwgaXQsIGkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHIucmVwbGFjZShuZXcgUmVnRXhwKHJvd19jb2xfd3JhcHBlciArIGkgKyByb3dfY29sX3dyYXBwZXIsIFwiZ1wiKSwgaXQpO1xyXG4gICAgICAgIH0sIGNvbF9uYW1lKTtcclxuICAgICAgICBpZiAoc2VyaWVzTmFtZS5zcGxpdChwYXR0ZXJuLmRlbGltaXRlciB8fCBcIi5cIikubGVuZ3RoID09PSAxIHx8IHJvd19uYW1lID09PSBzZXJpZXNOYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbF9uYW1lID0gcGF0dGVybi5jb2xfbmFtZSB8fCBcIlZhbHVlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGVtcGxhdGVfY29sX25hbWUgPSBjb2xfbmFtZTtcclxuICAgICAgICByZXR1cm4gY29sX25hbWU7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHJlcGxhY2VUb2tlbnMoKSB7XHJcbiAgICAgICAgLy8gX3Nlcmllc18gY2FuIGJlIHNwZWNpZmllZCBpbiBSb3csIENvbCwgRGlzcGxheSBWYWx1ZSwgVG9vbHRpcCAmIExpbmtcclxuICAgICAgICB0aGlzLnJvd19uYW1lID0gdGhpcy50ZW1wbGF0ZV9yb3dfbmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLmNvbF9uYW1lID0gdGhpcy50ZW1wbGF0ZV9jb2xfbmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLmxpbmsucmVwbGFjZShuZXcgUmVnRXhwKFwiX3Nlcmllc19cIiwgXCJnXCIpLCB0aGlzLnNlcmllc05hbWUudG9TdHJpbmcoKS50cmltKCkpO1xyXG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpLnRyaW0oKSk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5X3ZhbHVlID0gdGhpcy50ZW1wbGF0ZV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICAvLyBfcm93X25hbWVfIGNhbiBiZSBzcGVjaWZpZWQgaW4gQ29sLCBEaXNwbGF5IFZhbHVlLCBUb29sdGlwICYgTGlua1xyXG4gICAgICAgIHRoaXMuY29sX25hbWUgPSB0aGlzLmNvbF9uYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9yb3dfbmFtZV9cIiwgXCJnXCIpLCB0aGlzLnJvd19uYW1lLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfcm93X25hbWVfXCIsIFwiZ1wiKSwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnModGhpcy5yb3dfbmFtZS50b1N0cmluZygpKS50cmltKCkpO1xyXG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfcm93X25hbWVfXCIsIFwiZ1wiKSwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnModGhpcy5yb3dfbmFtZS50b1N0cmluZygpKS50cmltKCkpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfcm93X25hbWVfXCIsIFwiZ1wiKSwgdGhpcy5yb3dfbmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICAvLyBfY29sX25hbWVfIGNhbiBiZSBzcGVjaWZpZWQgaW4gUm93LCBEaXNwbGF5IFZhbHVlLCBUb29sdGlwICYgTGlua1xyXG4gICAgICAgIHRoaXMucm93X25hbWUgPSB0aGlzLnJvd19uYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9jb2xfbmFtZV9cIiwgXCJnXCIpLCB0aGlzLmNvbF9uYW1lLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfY29sX25hbWVfXCIsIFwiZ1wiKSwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnModGhpcy5jb2xfbmFtZS50b1N0cmluZygpKS50cmltKCkpO1xyXG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfY29sX25hbWVfXCIsIFwiZ1wiKSwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnModGhpcy5jb2xfbmFtZS50b1N0cmluZygpKS50cmltKCkpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfY29sX25hbWVfXCIsIFwiZ1wiKSwgdGhpcy5jb2xfbmFtZS50b1N0cmluZygpKTtcclxuICAgICAgICAvLyBfdmFsdWVfcmF3XyBjYW4gYmUgc3BlY2lmaWVkIGluIERpc3BsYXkgVmFsdWUsIFRvb2x0aXAgJiBMaW5rXHJcbiAgICAgICAgbGV0IHZhbHVlX3JhdyA9IF8uaXNOYU4odGhpcy52YWx1ZSkgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbCA/IFwibnVsbFwiIDogdGhpcy52YWx1ZS50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLmxpbmsucmVwbGFjZShuZXcgUmVnRXhwKFwiX3ZhbHVlX3Jhd19cIiwgXCJnXCIpLCB2YWx1ZV9yYXcpO1xyXG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfcmF3X1wiLCBcImdcIiksIHZhbHVlX3Jhdyk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5X3ZhbHVlID0gdGhpcy5kaXNwbGF5X3ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl92YWx1ZV9yYXdfXCIsIFwiZ1wiKSwgdmFsdWVfcmF3KTtcclxuICAgICAgICAvLyBfdmFsdWVfIGNhbiBiZSBzcGVjaWZpZWQgaW4gRGlzcGxheSBWYWx1ZSwgVG9vbHRpcCAmIExpbmtcclxuICAgICAgICBsZXQgdmFsdWVfZm9ybWF0dGVkID0gXy5pc05hTih0aGlzLnZhbHVlKSB8fCB0aGlzLnZhbHVlID09PSBudWxsID8gXCJudWxsXCIgOiB0aGlzLnZhbHVlX2Zvcm1hdHRlZC50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLmxpbmsucmVwbGFjZShuZXcgUmVnRXhwKFwiX3ZhbHVlX1wiLCBcImdcIiksIHZhbHVlX2Zvcm1hdHRlZCk7XHJcbiAgICAgICAgdGhpcy50b29sdGlwID0gdGhpcy50b29sdGlwLnJlcGxhY2UobmV3IFJlZ0V4cChcIl92YWx1ZV9cIiwgXCJnXCIpLCB2YWx1ZV9mb3JtYXR0ZWQpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfXCIsIFwiZ1wiKSwgdmFsdWVfZm9ybWF0dGVkKTtcclxuICAgICAgICAvLyBGQSAmIEltZyB0cmFuc2Zvcm1zIGNhbiBiZSBzcGVjaWZpZWQgaW4gUm93LCBDb2wgJiBEaXNwbGF5IFZhbHVlXHJcbiAgICAgICAgdGhpcy5yb3dfbmFtZSA9IHJlcGxhY2VUb2tlbnModGhpcy5yb3dfbmFtZSk7XHJcbiAgICAgICAgdGhpcy5jb2xfbmFtZSA9IHJlcGxhY2VUb2tlbnModGhpcy5jb2xfbmFtZSk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5X3ZhbHVlID0gcmVwbGFjZVRva2Vucyh0aGlzLmRpc3BsYXlfdmFsdWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgQm9vbVNlcmllc1xyXG59O1xyXG4iXX0=