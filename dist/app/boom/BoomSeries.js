System.register(["app/core/utils/kbn", "app/core/time_series2", "lodash", "./index"], function (exports_1, context_1) {
    "use strict";
    var kbn_1, time_series2_1, lodash_1, index_1, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            }
        ],
        execute: function () {
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options, templateSrv, timeSrv) {
                    var _this = this;
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    var nullPointMode = options && options.nullPointMode ? options.nullPointMode : "connected";
                    this.row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern = undefined;
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs(nullPointMode);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id;
                    this.currentTimeStamp = new Date();
                    if (series.dataPoints && series.dataPoints.length > 0 && lodash_1.default.last(series.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(series.dataPoints)[1]);
                    }
                    this.pattern = lodash_1.default.find(panelPatterns.filter(function (p) { return p.disabled !== true; }), function (p) { return _this.seriesName.match(p.pattern); }) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (series.stats) {
                        if (this.pattern.valueName === "last_time") {
                            if (lodash_1.default.last(series.datapoints)) {
                                this.value = lodash_1.default.last(series.datapoints)[1];
                            }
                        }
                        else if (this.pattern.valueName === "last_time_nonnull") {
                            var non_null_data = series.datapoints.filter(function (s) { return s[0]; });
                            if (lodash_1.default.last(non_null_data) && lodash_1.default.last(non_null_data)[1]) {
                                this.value = lodash_1.default.last(non_null_data)[1];
                            }
                        }
                        else {
                            this.value = series.stats[this.pattern.valueName];
                        }
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            var decimalInfo = index_1.getDecimalsForValue(this.value, this.decimals);
                            var formatFunc = kbn_1.default.valueFormats[this.pattern.format];
                            this.value_formatted = formatFunc(this.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                            this.display_value = String(this.value_formatted);
                        }
                        this.template_value = this.display_value;
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    this.row_name = this.getRowName(this.pattern, this.row_col_wrapper, this.seriesName.toString());
                    this.col_name = this.getColName(this.pattern, this.row_col_wrapper, this.seriesName.toString(), this.row_name);
                    this.thresholds = this.getThresholds(templateSrv);
                    this.color_bg = this.getBGColor(templateSrv);
                    this.color_text = this.getTextColor(templateSrv);
                    this.template_value = this.getDisplayValueTemplate();
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    if (this.link !== "#") {
                        var range = timeSrv.timeRangeForUrl();
                        this.link += (this.link.indexOf("?") > -1 ? "&from=" + range.from : "?from=" + range.from);
                        this.link += "&to=" + range.to;
                    }
                    this.replaceTokens(templateSrv);
                    this.cleanup();
                }
                BoomSeries.prototype.getThresholds = function (templateSrv) {
                    var thresholds = templateSrv.replaceWithText(this.pattern.thresholds).split(",").map(function (d) { return +d; });
                    if (this.pattern.enable_time_based_thresholds) {
                        var metricrecivedTimeStamp_1 = this.currentTimeStamp || new Date();
                        var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                        var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                        lodash_1.default.each(this.pattern.time_based_thresholds, function (tbtx) {
                            if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                                (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                                (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                                (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                                tbtx.threshold) {
                                thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                            }
                        });
                    }
                    return thresholds;
                };
                BoomSeries.prototype.getBGColor = function (templateSrv) {
                    var _this = this;
                    var bgColor = "transparent";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        bgColor = this.pattern.null_color || "darkred";
                        if (this.pattern.null_color === "") {
                            bgColor = "transparent";
                        }
                    }
                    else {
                        if (this.pattern.enable_bgColor && this.pattern.bgColors) {
                            var list_of_bgColors_based_on_thresholds = templateSrv.replaceWithText(this.pattern.bgColors).split("|");
                            bgColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_bgColors_based_on_thresholds, this.value, bgColor);
                        }
                        if (this.pattern.enable_bgColor_overrides && this.pattern.bgColors_overrides !== "") {
                            var _bgColors_overrides = templateSrv.replaceWithText(this.pattern.bgColors_overrides).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                                bgColor = ("" + _bgColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(bgColor);
                };
                BoomSeries.prototype.getTextColor = function (templateSrv) {
                    var _this = this;
                    var textColor = document.body.classList.contains("theme-light") ? "black" : "white";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        textColor = this.pattern.null_textcolor || textColor;
                    }
                    else {
                        if (this.pattern.enable_textColor && this.pattern.textColors) {
                            var list_of_textColors_based_on_thresholds = templateSrv.replaceWithText(this.pattern.textColors).split("|");
                            textColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_textColors_based_on_thresholds, this.value, textColor);
                        }
                        if (this.pattern.enable_textColor_overrides && this.pattern.textColors_overrides !== "") {
                            var _textColors_overrides = templateSrv.replaceWithText(this.pattern.textColors_overrides).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                                textColor = ("" + _textColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(textColor);
                };
                BoomSeries.prototype.getDisplayValueTemplate = function () {
                    var _this = this;
                    var template = this.template_value;
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        template = this.pattern.null_value || "No data";
                        if (this.pattern.null_value === "") {
                            template = "";
                        }
                    }
                    else {
                        if (this.pattern.enable_transform) {
                            var transform_values = this.pattern.transform_values.split("|");
                            template = index_1.getItemBasedOnThreshold(this.thresholds, transform_values, this.value, template);
                        }
                        if (this.pattern.enable_transform_overrides && this.pattern.transform_values_overrides !== "") {
                            var _transform_values_overrides = this.pattern.transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                                template = ("" + _transform_values_overrides[0]).trim();
                            }
                        }
                        if (this.pattern.enable_transform || this.pattern.enable_transform_overrides) {
                            template = this.seriesName.split(this.pattern.delimiter || ".").reduce(function (r, it, i) {
                                return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                            }, template);
                        }
                    }
                    return template;
                };
                BoomSeries.prototype.cleanup = function () {
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_col_name;
                        delete this.template_row_name;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper, seriesName) {
                    var row_name = pattern.row_name;
                    row_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, row_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1) {
                        row_name = seriesName;
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, seriesName, row_name) {
                    var col_name = pattern.col_name;
                    col_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, col_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1 || row_name === seriesName) {
                        col_name = pattern.col_name || "Value";
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.replaceTokens = function (templateSrv) {
                    var _this = this;
                    this.link = this.seriesName.split(this.pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                    }, this.link);
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                    this.row_name = templateSrv.replaceWithText(this.row_name);
                    this.col_name = templateSrv.replaceWithText(this.col_name);
                    this.display_value = templateSrv.replaceWithText(this.display_value);
                    this.tooltip = templateSrv.replaceWithText(this.tooltip);
                    this.link = templateSrv.replaceWithText(this.link);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9vbVNlcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvYm9vbS9Cb29tU2VyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBT0E7Z0JBcUJJLG9CQUFZLFVBQWUsRUFBRSxtQkFBd0IsRUFBRSxhQUFvQixFQUFFLE9BQVksRUFBRSxXQUFnQixFQUFFLE9BQVk7b0JBQXpILGlCQXVFQztvQkE5RU0sa0JBQWEsR0FBRyxHQUFHLENBQUM7b0JBQ3BCLFlBQU8sR0FBRyxHQUFHLENBQUM7b0JBQ2QsVUFBSyxHQUFHLEdBQUcsQ0FBQztvQkFDWixvQkFBZSxHQUFHLEdBQUcsQ0FBQztvQkFDdEIsU0FBSSxHQUFHLEdBQUcsQ0FBQztvQkFJZCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hFLElBQUksYUFBYSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQzNGLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztvQkFDMUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7b0JBQzVCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7b0JBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO29CQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztvQkFDcEIsSUFBSSxDQUFDLE9BQU8sR0FB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LElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFFdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDekQsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkQsQ0FBQztnQkFDTCxpQkFBQztZQUFELENBQUMsQUEvUEQsSUErUEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy88cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ3JhZmFuYS1zZGstbW9ja3MvYXBwL2hlYWRlcnMvY29tbW9uLmQudHNcIiAvPlxuXG5pbXBvcnQga2JuIGZyb20gJ2FwcC9jb3JlL3V0aWxzL2tibic7XG5pbXBvcnQgVGltZVNlcmllcyBmcm9tIFwiYXBwL2NvcmUvdGltZV9zZXJpZXMyXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBJQm9vbVNlcmllcywgcmVwbGFjZVRva2VucywgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnMsIGdldERlY2ltYWxzRm9yVmFsdWUsIGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkLCBub3JtYWxpemVDb2xvciB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmNsYXNzIEJvb21TZXJpZXMgaW1wbGVtZW50cyBJQm9vbVNlcmllcyB7XG4gICAgcHJpdmF0ZSBkZWJ1Z19tb2RlOiBCb29sZWFuO1xuICAgIHByaXZhdGUgcGF0dGVybjogYW55O1xuICAgIHByaXZhdGUgc2VyaWVzTmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgY3VycmVudFRpbWVTdGFtcDogRGF0ZTtcbiAgICBwcml2YXRlIHRlbXBsYXRlX3Jvd19uYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZV9jb2xfbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgdGVtcGxhdGVfdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIHJvd19jb2xfd3JhcHBlcjogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVjaW1hbHM6IE51bWJlcjtcbiAgICBwdWJsaWMgY29sX25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgcm93X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgY29sb3JfYmc6IHN0cmluZztcbiAgICBwdWJsaWMgY29sb3JfdGV4dDogc3RyaW5nO1xuICAgIHB1YmxpYyBkaXNwbGF5X3ZhbHVlID0gXCItXCI7XG4gICAgcHVibGljIHRvb2x0aXAgPSBcIi1cIjtcbiAgICBwdWJsaWMgdmFsdWUgPSBOYU47XG4gICAgcHVibGljIHZhbHVlX2Zvcm1hdHRlZCA9IFwiLVwiO1xuICAgIHB1YmxpYyBsaW5rID0gXCItXCI7XG4gICAgcHVibGljIHRocmVzaG9sZHM6IE51bWJlcltdO1xuICAgIHB1YmxpYyBoaWRkZW46IEJvb2xlYW47XG4gICAgY29uc3RydWN0b3Ioc2VyaWVzRGF0YTogYW55LCBwYW5lbERlZmF1bHRQYXR0ZXJuOiBhbnksIHBhbmVsUGF0dGVybnM6IGFueVtdLCBvcHRpb25zOiBhbnksIHRlbXBsYXRlU3J2OiBhbnksIHRpbWVTcnY6IGFueSkge1xuICAgICAgICB0aGlzLmRlYnVnX21vZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVidWdfbW9kZSA9PT0gdHJ1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgbGV0IG51bGxQb2ludE1vZGUgPSBvcHRpb25zICYmIG9wdGlvbnMubnVsbFBvaW50TW9kZSA/IG9wdGlvbnMubnVsbFBvaW50TW9kZSA6IFwiY29ubmVjdGVkXCI7XG4gICAgICAgIHRoaXMucm93X2NvbF93cmFwcGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLnJvd19jb2xfd3JhcHBlciA/IG9wdGlvbnMucm93X2NvbF93cmFwcGVyIDogXCJfXCI7XG4gICAgICAgIHRoaXMuc2VyaWVzTmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMudGVtcGxhdGVfcm93X25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnRlbXBsYXRlX2NvbF9uYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZV92YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGF0dGVybiA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHNlcmllcyA9IG5ldyBUaW1lU2VyaWVzKHtcbiAgICAgICAgICAgIGFsaWFzOiBzZXJpZXNEYXRhLnRhcmdldCxcbiAgICAgICAgICAgIGRhdGFwb2ludHM6IHNlcmllc0RhdGEuZGF0YXBvaW50cyB8fCBbXVxuICAgICAgICB9KTtcbiAgICAgICAgc2VyaWVzLmZsb3RwYWlycyA9IHNlcmllcy5nZXRGbG90UGFpcnMobnVsbFBvaW50TW9kZSk7XG4gICAgICAgIHRoaXMuc2VyaWVzTmFtZSA9IHNlcmllcy5hbGlhcyB8fCBzZXJpZXMuYWxpYXNFc2NhcGVkIHx8IHNlcmllcy5sYWJlbCB8fCBzZXJpZXMuaWQ7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGlmIChzZXJpZXMuZGF0YVBvaW50cyAmJiBzZXJpZXMuZGF0YVBvaW50cy5sZW5ndGggPiAwICYmIF8ubGFzdChzZXJpZXMuZGF0YVBvaW50cykubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lU3RhbXAgPSBuZXcgRGF0ZShfLmxhc3Qoc2VyaWVzLmRhdGFQb2ludHMpWzFdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdHRlcm4gPSBfLmZpbmQocGFuZWxQYXR0ZXJucy5maWx0ZXIocCA9PiB7IHJldHVybiBwLmRpc2FibGVkICE9PSB0cnVlOyB9KSwgcCA9PiB0aGlzLnNlcmllc05hbWUubWF0Y2gocC5wYXR0ZXJuKSkgfHwgcGFuZWxEZWZhdWx0UGF0dGVybjtcbiAgICAgICAgdGhpcy5kZWNpbWFscyA9IHRoaXMucGF0dGVybi5kZWNpbWFscyB8fCBwYW5lbERlZmF1bHRQYXR0ZXJuLmRlY2ltYWxzIHx8IDI7XG4gICAgICAgIGlmIChzZXJpZXMuc3RhdHMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdHRlcm4udmFsdWVOYW1lID09PSBcImxhc3RfdGltZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ubGFzdChzZXJpZXMuZGF0YXBvaW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IF8ubGFzdChzZXJpZXMuZGF0YXBvaW50cylbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhdHRlcm4udmFsdWVOYW1lID09PSBcImxhc3RfdGltZV9ub25udWxsXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9uX251bGxfZGF0YSA9IHNlcmllcy5kYXRhcG9pbnRzLmZpbHRlcihzID0+IHNbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChfLmxhc3Qobm9uX251bGxfZGF0YSkgJiYgXy5sYXN0KG5vbl9udWxsX2RhdGEpWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBfLmxhc3Qobm9uX251bGxfZGF0YSlbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gc2VyaWVzLnN0YXRzW3RoaXMucGF0dGVybi52YWx1ZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uaXNOYU4odGhpcy52YWx1ZSkgfHwgdGhpcy52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMucGF0dGVybi5udWxsX3ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlfdmFsdWUgPSBTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRlY2ltYWxJbmZvOiBhbnkgPSBnZXREZWNpbWFsc0ZvclZhbHVlKHRoaXMudmFsdWUsIHRoaXMuZGVjaW1hbHMpO1xuICAgICAgICAgICAgICAgIGxldCBmb3JtYXRGdW5jID0ga2JuLnZhbHVlRm9ybWF0c1t0aGlzLnBhdHRlcm4uZm9ybWF0XTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlX2Zvcm1hdHRlZCA9IGZvcm1hdEZ1bmModGhpcy52YWx1ZSwgZGVjaW1hbEluZm8uZGVjaW1hbHMsIGRlY2ltYWxJbmZvLnNjYWxlZERlY2ltYWxzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlfdmFsdWUgPSBTdHJpbmcodGhpcy52YWx1ZV9mb3JtYXR0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZSAmJiB0aGlzLnBhdHRlcm4gJiYgdGhpcy5wYXR0ZXJuLmZpbHRlciAmJiAodGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9iZWxvdyAhPT0gXCJcIiB8fCB0aGlzLnBhdHRlcm4uZmlsdGVyLnZhbHVlX2Fib3ZlICE9PSBcIlwiKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5maWx0ZXIudmFsdWVfYmVsb3cgIT09IFwiXCIgJiYgdGhpcy52YWx1ZSA8ICsodGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9iZWxvdykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmZpbHRlci52YWx1ZV9hYm92ZSAhPT0gXCJcIiAmJiB0aGlzLnZhbHVlID4gKyh0aGlzLnBhdHRlcm4uZmlsdGVyLnZhbHVlX2Fib3ZlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvd19uYW1lID0gdGhpcy5nZXRSb3dOYW1lKHRoaXMucGF0dGVybiwgdGhpcy5yb3dfY29sX3dyYXBwZXIsIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5jb2xfbmFtZSA9IHRoaXMuZ2V0Q29sTmFtZSh0aGlzLnBhdHRlcm4sIHRoaXMucm93X2NvbF93cmFwcGVyLCB0aGlzLnNlcmllc05hbWUudG9TdHJpbmcoKSwgdGhpcy5yb3dfbmFtZSk7XG4gICAgICAgIHRoaXMudGhyZXNob2xkcyA9IHRoaXMuZ2V0VGhyZXNob2xkcyh0ZW1wbGF0ZVNydik7XG4gICAgICAgIHRoaXMuY29sb3JfYmcgPSB0aGlzLmdldEJHQ29sb3IodGVtcGxhdGVTcnYpO1xuICAgICAgICB0aGlzLmNvbG9yX3RleHQgPSB0aGlzLmdldFRleHRDb2xvcih0ZW1wbGF0ZVNydik7XG4gICAgICAgIHRoaXMudGVtcGxhdGVfdmFsdWUgPSB0aGlzLmdldERpc3BsYXlWYWx1ZVRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMucGF0dGVybi50b29sdGlwVGVtcGxhdGUgfHwgXCJTZXJpZXMgOiBfc2VyaWVzXyA8YnIvPlJvdyBOYW1lIDogX3Jvd19uYW1lXyA8YnIvPkNvbCBOYW1lIDogX2NvbF9uYW1lXyA8YnIvPlZhbHVlIDogX3ZhbHVlX1wiO1xuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLnBhdHRlcm4uZW5hYmxlX2NsaWNrYWJsZV9jZWxscyA/IHRoaXMucGF0dGVybi5jbGlja2FibGVfY2VsbHNfbGluayB8fCBcIiNcIiA6IFwiI1wiO1xuICAgICAgICBpZiAodGhpcy5saW5rICE9PSBcIiNcIikge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aW1lU3J2LnRpbWVSYW5nZUZvclVybCgpO1xuICAgICAgICAgICAgdGhpcy5saW5rICs9ICh0aGlzLmxpbmsuaW5kZXhPZihcIj9cIikgPiAtMSA/IGAmZnJvbT0ke3JhbmdlLmZyb219YCA6IGA/ZnJvbT0ke3JhbmdlLmZyb219YCk7XG4gICAgICAgICAgICB0aGlzLmxpbmsgKz0gYCZ0bz0ke3JhbmdlLnRvfWA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXBsYWNlVG9rZW5zKHRlbXBsYXRlU3J2KTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgfVxuICAgIHByaXZhdGUgZ2V0VGhyZXNob2xkcyh0ZW1wbGF0ZVNydjogYW55KSB7XG4gICAgICAgIGxldCB0aHJlc2hvbGRzID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMucGF0dGVybi50aHJlc2hvbGRzKS5zcGxpdChcIixcIikubWFwKGQgPT4gK2QpO1xuICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV90aW1lX2Jhc2VkX3RocmVzaG9sZHMpIHtcbiAgICAgICAgICAgIGxldCBtZXRyaWNyZWNpdmVkVGltZVN0YW1wID0gdGhpcy5jdXJyZW50VGltZVN0YW1wIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgbWV0cmljcmVjaXZlZFRpbWVTdGFtcF9pbm51bWJlciA9IG1ldHJpY3JlY2l2ZWRUaW1lU3RhbXAuZ2V0SG91cnMoKSAqIDEwMCArIG1ldHJpY3JlY2l2ZWRUaW1lU3RhbXAuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgbGV0IHdlZWtkYXlzID0gW1wic3VuXCIsIFwibW9uXCIsIFwidHVlXCIsIFwid2VkXCIsIFwidGh1XCIsIFwiZnJpXCIsIFwic2F0XCJdO1xuICAgICAgICAgICAgXy5lYWNoKHRoaXMucGF0dGVybi50aW1lX2Jhc2VkX3RocmVzaG9sZHMsICh0YnR4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRidHggJiYgdGJ0eC5mcm9tICYmIHRidHgudG8gJiYgdGJ0eC5lbmFibGVkRGF5cyAmJlxuICAgICAgICAgICAgICAgICAgICAobWV0cmljcmVjaXZlZFRpbWVTdGFtcF9pbm51bWJlciA+PSArKHRidHguZnJvbSkpICYmXG4gICAgICAgICAgICAgICAgICAgIChtZXRyaWNyZWNpdmVkVGltZVN0YW1wX2lubnVtYmVyIDw9ICsodGJ0eC50bykpICYmXG4gICAgICAgICAgICAgICAgICAgICh0YnR4LmVuYWJsZWREYXlzLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih3ZWVrZGF5c1ttZXRyaWNyZWNpdmVkVGltZVN0YW1wLmdldERheSgpXSkgPiAtMSkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGJ0eC50aHJlc2hvbGRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkcyA9ICh0YnR4LnRocmVzaG9sZCArIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoZCA9PiArZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHM7XG4gICAgfVxuICAgIHByaXZhdGUgZ2V0QkdDb2xvcih0ZW1wbGF0ZVNydjogYW55KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGJnQ29sb3IgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIGlmIChfLmlzTmFOKHRoaXMudmFsdWUpIHx8IHRoaXMudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGJnQ29sb3IgPSB0aGlzLnBhdHRlcm4ubnVsbF9jb2xvciB8fCBcImRhcmtyZWRcIjtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdHRlcm4ubnVsbF9jb2xvciA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGJnQ29sb3IgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV9iZ0NvbG9yICYmIHRoaXMucGF0dGVybi5iZ0NvbG9ycykge1xuICAgICAgICAgICAgICAgIGxldCBsaXN0X29mX2JnQ29sb3JzX2Jhc2VkX29uX3RocmVzaG9sZHMgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlV2l0aFRleHQodGhpcy5wYXR0ZXJuLmJnQ29sb3JzKS5zcGxpdChcInxcIik7XG4gICAgICAgICAgICAgICAgYmdDb2xvciA9IGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKHRoaXMudGhyZXNob2xkcywgbGlzdF9vZl9iZ0NvbG9yc19iYXNlZF9vbl90aHJlc2hvbGRzLCB0aGlzLnZhbHVlLCBiZ0NvbG9yKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfYmdDb2xvcl9vdmVycmlkZXMgJiYgdGhpcy5wYXR0ZXJuLmJnQ29sb3JzX292ZXJyaWRlcyAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGxldCBfYmdDb2xvcnNfb3ZlcnJpZGVzID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMucGF0dGVybi5iZ0NvbG9yc19vdmVycmlkZXMpLnNwbGl0KFwifFwiKS5maWx0ZXIoY29uID0+IGNvbi5pbmRleE9mKFwiLT5cIikpLm1hcChjb24gPT4gY29uLnNwbGl0KFwiLT5cIikpLmZpbHRlcihjb24gPT4gKyhjb25bMF0pID09PSB0aGlzLnZhbHVlKS5tYXAoY29uID0+IGNvblsxXSk7XG4gICAgICAgICAgICAgICAgaWYgKF9iZ0NvbG9yc19vdmVycmlkZXMubGVuZ3RoID4gMCAmJiBfYmdDb2xvcnNfb3ZlcnJpZGVzWzBdICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGJnQ29sb3IgPSAoXCJcIiArIF9iZ0NvbG9yc19vdmVycmlkZXNbMF0pLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUNvbG9yKGJnQ29sb3IpO1xuICAgIH1cbiAgICBwcml2YXRlIGdldFRleHRDb2xvcih0ZW1wbGF0ZVNydjogYW55KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRleHRDb2xvciA9IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGhlbWUtbGlnaHRcIikgPyBcImJsYWNrXCIgOiBcIndoaXRlXCI7XG4gICAgICAgIGlmIChfLmlzTmFOKHRoaXMudmFsdWUpIHx8IHRoaXMudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRleHRDb2xvciA9IHRoaXMucGF0dGVybi5udWxsX3RleHRjb2xvciB8fCB0ZXh0Q29sb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV90ZXh0Q29sb3IgJiYgdGhpcy5wYXR0ZXJuLnRleHRDb2xvcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGlzdF9vZl90ZXh0Q29sb3JzX2Jhc2VkX29uX3RocmVzaG9sZHMgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlV2l0aFRleHQodGhpcy5wYXR0ZXJuLnRleHRDb2xvcnMpLnNwbGl0KFwifFwiKTtcbiAgICAgICAgICAgICAgICB0ZXh0Q29sb3IgPSBnZXRJdGVtQmFzZWRPblRocmVzaG9sZCh0aGlzLnRocmVzaG9sZHMsIGxpc3Rfb2ZfdGV4dENvbG9yc19iYXNlZF9vbl90aHJlc2hvbGRzLCB0aGlzLnZhbHVlLCB0ZXh0Q29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfdGV4dENvbG9yX292ZXJyaWRlcyAmJiB0aGlzLnBhdHRlcm4udGV4dENvbG9yc19vdmVycmlkZXMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgX3RleHRDb2xvcnNfb3ZlcnJpZGVzID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMucGF0dGVybi50ZXh0Q29sb3JzX292ZXJyaWRlcykuc3BsaXQoXCJ8XCIpLmZpbHRlcihjb24gPT4gY29uLmluZGV4T2YoXCItPlwiKSkubWFwKGNvbiA9PiBjb24uc3BsaXQoXCItPlwiKSkuZmlsdGVyKGNvbiA9PiArKGNvblswXSkgPT09IHRoaXMudmFsdWUpLm1hcChjb24gPT4gY29uWzFdKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RleHRDb2xvcnNfb3ZlcnJpZGVzLmxlbmd0aCA+IDAgJiYgX3RleHRDb2xvcnNfb3ZlcnJpZGVzWzBdICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRDb2xvciA9IChcIlwiICsgX3RleHRDb2xvcnNfb3ZlcnJpZGVzWzBdKS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3JtYWxpemVDb2xvcih0ZXh0Q29sb3IpO1xuICAgIH1cbiAgICBwcml2YXRlIGdldERpc3BsYXlWYWx1ZVRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVfdmFsdWU7XG4gICAgICAgIGlmIChfLmlzTmFOKHRoaXMudmFsdWUpIHx8IHRoaXMudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGhpcy5wYXR0ZXJuLm51bGxfdmFsdWUgfHwgXCJObyBkYXRhXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLm51bGxfdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmVuYWJsZV90cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtX3ZhbHVlcyA9IHRoaXMucGF0dGVybi50cmFuc2Zvcm1fdmFsdWVzLnNwbGl0KFwifFwiKTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKHRoaXMudGhyZXNob2xkcywgdHJhbnNmb3JtX3ZhbHVlcywgdGhpcy52YWx1ZSwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfdHJhbnNmb3JtX292ZXJyaWRlcyAmJiB0aGlzLnBhdHRlcm4udHJhbnNmb3JtX3ZhbHVlc19vdmVycmlkZXMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgX3RyYW5zZm9ybV92YWx1ZXNfb3ZlcnJpZGVzID0gdGhpcy5wYXR0ZXJuLnRyYW5zZm9ybV92YWx1ZXNfb3ZlcnJpZGVzLnNwbGl0KFwifFwiKS5maWx0ZXIoY29uID0+IGNvbi5pbmRleE9mKFwiLT5cIikpLm1hcChjb24gPT4gY29uLnNwbGl0KFwiLT5cIikpLmZpbHRlcihjb24gPT4gKyhjb25bMF0pID09PSB0aGlzLnZhbHVlKS5tYXAoY29uID0+IGNvblsxXSk7XG4gICAgICAgICAgICAgICAgaWYgKF90cmFuc2Zvcm1fdmFsdWVzX292ZXJyaWRlcy5sZW5ndGggPiAwICYmIF90cmFuc2Zvcm1fdmFsdWVzX292ZXJyaWRlc1swXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IChcIlwiICsgX3RyYW5zZm9ybV92YWx1ZXNfb3ZlcnJpZGVzWzBdKS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybi5lbmFibGVfdHJhbnNmb3JtIHx8IHRoaXMucGF0dGVybi5lbmFibGVfdHJhbnNmb3JtX292ZXJyaWRlcykge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gdGhpcy5zZXJpZXNOYW1lLnNwbGl0KHRoaXMucGF0dGVybi5kZWxpbWl0ZXIgfHwgXCIuXCIpLnJlZHVjZSgociwgaXQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMucm93X2NvbF93cmFwcGVyICsgaSArIHRoaXMucm93X2NvbF93cmFwcGVyLCBcImdcIiksIGl0KTtcbiAgICAgICAgICAgICAgICB9LCB0ZW1wbGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgICBwcml2YXRlIGNsZWFudXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnX21vZGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNlcmllc05hbWU7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5wYXR0ZXJuO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudGhyZXNob2xkcztcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRlY2ltYWxzO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudGVtcGxhdGVfY29sX25hbWU7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy50ZW1wbGF0ZV9yb3dfbmFtZTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRlbXBsYXRlX3ZhbHVlO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudmFsdWVfZm9ybWF0dGVkO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudFRpbWVTdGFtcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGdldFJvd05hbWUocGF0dGVybiwgcm93X2NvbF93cmFwcGVyOiBzdHJpbmcsIHNlcmllc05hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByb3dfbmFtZSA9IHBhdHRlcm4ucm93X25hbWU7XG4gICAgICAgIHJvd19uYW1lID0gc2VyaWVzTmFtZS5zcGxpdChwYXR0ZXJuLmRlbGltaXRlciB8fCBcIi5cIikucmVkdWNlKChyLCBpdCwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHIucmVwbGFjZShuZXcgUmVnRXhwKHJvd19jb2xfd3JhcHBlciArIGkgKyByb3dfY29sX3dyYXBwZXIsIFwiZ1wiKSwgaXQpO1xuICAgICAgICB9LCByb3dfbmFtZSk7XG4gICAgICAgIGlmIChzZXJpZXNOYW1lLnNwbGl0KHBhdHRlcm4uZGVsaW1pdGVyIHx8IFwiLlwiKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJvd19uYW1lID0gc2VyaWVzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlbXBsYXRlX3Jvd19uYW1lID0gcm93X25hbWU7XG4gICAgICAgIHJldHVybiByb3dfbmFtZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBnZXRDb2xOYW1lKHBhdHRlcm4sIHJvd19jb2xfd3JhcHBlcjogc3RyaW5nLCBzZXJpZXNOYW1lOiBzdHJpbmcsIHJvd19uYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgY29sX25hbWUgPSBwYXR0ZXJuLmNvbF9uYW1lO1xuICAgICAgICBjb2xfbmFtZSA9IHNlcmllc05hbWUuc3BsaXQocGF0dGVybi5kZWxpbWl0ZXIgfHwgXCIuXCIpLnJlZHVjZSgociwgaXQsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByLnJlcGxhY2UobmV3IFJlZ0V4cChyb3dfY29sX3dyYXBwZXIgKyBpICsgcm93X2NvbF93cmFwcGVyLCBcImdcIiksIGl0KTtcbiAgICAgICAgfSwgY29sX25hbWUpO1xuICAgICAgICBpZiAoc2VyaWVzTmFtZS5zcGxpdChwYXR0ZXJuLmRlbGltaXRlciB8fCBcIi5cIikubGVuZ3RoID09PSAxIHx8IHJvd19uYW1lID09PSBzZXJpZXNOYW1lKSB7XG4gICAgICAgICAgICBjb2xfbmFtZSA9IHBhdHRlcm4uY29sX25hbWUgfHwgXCJWYWx1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGVtcGxhdGVfY29sX25hbWUgPSBjb2xfbmFtZTtcbiAgICAgICAgcmV0dXJuIGNvbF9uYW1lO1xuICAgIH1cbiAgICBwcml2YXRlIHJlcGxhY2VUb2tlbnModGVtcGxhdGVTcnY6IGFueSkge1xuICAgICAgICAvLyBjb2xuYW1lcyBjYW4gYmUgc3BlY2lmaWVkIGluIHRoZSBsaW5rXG4gICAgICAgIHRoaXMubGluayA9IHRoaXMuc2VyaWVzTmFtZS5zcGxpdCh0aGlzLnBhdHRlcm4uZGVsaW1pdGVyIHx8IFwiLlwiKS5yZWR1Y2UoKHIsIGl0LCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gci5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5yb3dfY29sX3dyYXBwZXIgKyBpICsgdGhpcy5yb3dfY29sX3dyYXBwZXIsIFwiZ1wiKSwgaXQpO1xuICAgICAgICB9LCB0aGlzLmxpbmspO1xuICAgICAgICAvLyBfc2VyaWVzXyBjYW4gYmUgc3BlY2lmaWVkIGluIFJvdywgQ29sLCBEaXNwbGF5IFZhbHVlLCBUb29sdGlwICYgTGlua1xuICAgICAgICB0aGlzLnJvd19uYW1lID0gdGhpcy50ZW1wbGF0ZV9yb3dfbmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5jb2xfbmFtZSA9IHRoaXMudGVtcGxhdGVfY29sX25hbWUucmVwbGFjZShuZXcgUmVnRXhwKFwiX3Nlcmllc19cIiwgXCJnXCIpLCB0aGlzLnNlcmllc05hbWUudG9TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpLnRyaW0oKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfc2VyaWVzX1wiLCBcImdcIiksIHRoaXMuc2VyaWVzTmFtZS50b1N0cmluZygpLnRyaW0oKSk7XG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMudGVtcGxhdGVfdmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiX3Nlcmllc19cIiwgXCJnXCIpLCB0aGlzLnNlcmllc05hbWUudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIF9yb3dfbmFtZV8gY2FuIGJlIHNwZWNpZmllZCBpbiBDb2wsIERpc3BsYXkgVmFsdWUsIFRvb2x0aXAgJiBMaW5rXG4gICAgICAgIHRoaXMuY29sX25hbWUgPSB0aGlzLmNvbF9uYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9yb3dfbmFtZV9cIiwgXCJnXCIpLCB0aGlzLnJvd19uYW1lLnRvU3RyaW5nKCkpO1xuICAgICAgICB0aGlzLmxpbmsgPSB0aGlzLmxpbmsucmVwbGFjZShuZXcgUmVnRXhwKFwiX3Jvd19uYW1lX1wiLCBcImdcIiksIGdldEFjdHVhbE5hbWVXaXRob3V0VG9rZW5zKHRoaXMucm93X25hbWUudG9TdHJpbmcoKSkudHJpbSgpKTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdGhpcy50b29sdGlwLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9yb3dfbmFtZV9cIiwgXCJnXCIpLCBnZXRBY3R1YWxOYW1lV2l0aG91dFRva2Vucyh0aGlzLnJvd19uYW1lLnRvU3RyaW5nKCkpLnRyaW0oKSk7XG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfcm93X25hbWVfXCIsIFwiZ1wiKSwgdGhpcy5yb3dfbmFtZS50b1N0cmluZygpKTtcbiAgICAgICAgLy8gX2NvbF9uYW1lXyBjYW4gYmUgc3BlY2lmaWVkIGluIFJvdywgRGlzcGxheSBWYWx1ZSwgVG9vbHRpcCAmIExpbmtcbiAgICAgICAgdGhpcy5yb3dfbmFtZSA9IHRoaXMucm93X25hbWUucmVwbGFjZShuZXcgUmVnRXhwKFwiX2NvbF9uYW1lX1wiLCBcImdcIiksIHRoaXMuY29sX25hbWUudG9TdHJpbmcoKSk7XG4gICAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfY29sX25hbWVfXCIsIFwiZ1wiKSwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnModGhpcy5jb2xfbmFtZS50b1N0cmluZygpKS50cmltKCkpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnRvb2x0aXAucmVwbGFjZShuZXcgUmVnRXhwKFwiX2NvbF9uYW1lX1wiLCBcImdcIiksIGdldEFjdHVhbE5hbWVXaXRob3V0VG9rZW5zKHRoaXMuY29sX25hbWUudG9TdHJpbmcoKSkudHJpbSgpKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5X3ZhbHVlID0gdGhpcy5kaXNwbGF5X3ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl9jb2xfbmFtZV9cIiwgXCJnXCIpLCB0aGlzLmNvbF9uYW1lLnRvU3RyaW5nKCkpO1xuICAgICAgICAvLyBfdmFsdWVfcmF3XyBjYW4gYmUgc3BlY2lmaWVkIGluIERpc3BsYXkgVmFsdWUsIFRvb2x0aXAgJiBMaW5rXG4gICAgICAgIGxldCB2YWx1ZV9yYXcgPSBfLmlzTmFOKHRoaXMudmFsdWUpIHx8IHRoaXMudmFsdWUgPT09IG51bGwgPyBcIm51bGxcIiA6IHRoaXMudmFsdWUudG9TdHJpbmcoKS50cmltKCk7XG4gICAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfcmF3X1wiLCBcImdcIiksIHZhbHVlX3Jhdyk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMudG9vbHRpcC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfcmF3X1wiLCBcImdcIiksIHZhbHVlX3Jhdyk7XG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfcmF3X1wiLCBcImdcIiksIHZhbHVlX3Jhdyk7XG4gICAgICAgIC8vIF92YWx1ZV8gY2FuIGJlIHNwZWNpZmllZCBpbiBEaXNwbGF5IFZhbHVlLCBUb29sdGlwICYgTGlua1xuICAgICAgICBsZXQgdmFsdWVfZm9ybWF0dGVkID0gXy5pc05hTih0aGlzLnZhbHVlKSB8fCB0aGlzLnZhbHVlID09PSBudWxsID8gXCJudWxsXCIgOiB0aGlzLnZhbHVlX2Zvcm1hdHRlZC50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgICAgdGhpcy5saW5rID0gdGhpcy5saW5rLnJlcGxhY2UobmV3IFJlZ0V4cChcIl92YWx1ZV9cIiwgXCJnXCIpLCB2YWx1ZV9mb3JtYXR0ZWQpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLnRvb2x0aXAucmVwbGFjZShuZXcgUmVnRXhwKFwiX3ZhbHVlX1wiLCBcImdcIiksIHZhbHVlX2Zvcm1hdHRlZCk7XG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHRoaXMuZGlzcGxheV92YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJfdmFsdWVfXCIsIFwiZ1wiKSwgdmFsdWVfZm9ybWF0dGVkKTtcbiAgICAgICAgLy8gRkEgJiBJbWcgdHJhbnNmb3JtcyBjYW4gYmUgc3BlY2lmaWVkIGluIFJvdywgQ29sICYgRGlzcGxheSBWYWx1ZVxuICAgICAgICB0aGlzLnJvd19uYW1lID0gcmVwbGFjZVRva2Vucyh0aGlzLnJvd19uYW1lKTtcbiAgICAgICAgdGhpcy5jb2xfbmFtZSA9IHJlcGxhY2VUb2tlbnModGhpcy5jb2xfbmFtZSk7XG4gICAgICAgIHRoaXMuZGlzcGxheV92YWx1ZSA9IHJlcGxhY2VUb2tlbnModGhpcy5kaXNwbGF5X3ZhbHVlKTtcbiAgICAgICAgLy8gUmVwbGFjZSBHcmFmYW5hIFZhcmlhYmxlc1xuICAgICAgICB0aGlzLnJvd19uYW1lID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMucm93X25hbWUpO1xuICAgICAgICB0aGlzLmNvbF9uYW1lID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMuY29sX25hbWUpO1xuICAgICAgICB0aGlzLmRpc3BsYXlfdmFsdWUgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlV2l0aFRleHQodGhpcy5kaXNwbGF5X3ZhbHVlKTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdGVtcGxhdGVTcnYucmVwbGFjZVdpdGhUZXh0KHRoaXMudG9vbHRpcCk7XG4gICAgICAgIHRoaXMubGluayA9IHRlbXBsYXRlU3J2LnJlcGxhY2VXaXRoVGV4dCh0aGlzLmxpbmspO1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBCb29tU2VyaWVzXG59O1xuIl19