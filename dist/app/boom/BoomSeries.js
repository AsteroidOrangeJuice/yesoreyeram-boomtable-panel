System.register(["app/core/utils/kbn", "app/core/time_series2", "lodash", "./index"], function (exports_1, context_1) {
    "use strict";
    var kbn_1, time_series2_1, lodash_1, index_1, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            }
        ],
        execute: function () {
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options, templateSrv) {
                    var _this = this;
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    var nullPointMode = options && options.nullPointMode ? options.nullPointMode : "connected";
                    this.row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern = undefined;
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs(nullPointMode);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id;
                    this.currentTimeStamp = new Date();
                    if (series.dataPoints && series.dataPoints.length > 0 && lodash_1.default.last(series.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(series.dataPoints)[1]);
                    }
                    this.pattern = lodash_1.default.find(panelPatterns.filter(function (p) { return p.disabled !== true; }), function (p) { return _this.seriesName.match(p.pattern); }) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (series.stats) {
                        this.value = series.stats[this.pattern.valueName];
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            var decimalInfo = index_1.getDecimalsForValue(this.value, this.decimals);
                            var formatFunc = kbn_1.default.valueFormats[this.pattern.format];
                            this.value_formatted = formatFunc(this.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                            this.display_value = String(this.value_formatted);
                        }
                        this.template_value = this.display_value;
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    this.row_name = this.getRowName(this.pattern, this.row_col_wrapper, this.seriesName.toString());
                    this.col_name = this.getColName(this.pattern, this.row_col_wrapper, this.seriesName.toString(), this.row_name);
                    this.thresholds = this.getThresholds(templateSrv);
                    this.color_bg = this.getBGColor(templateSrv);
                    this.color_text = this.getTextColor(templateSrv);
                    this.template_value = this.getDisplayValueTemplate();
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    this.replaceTokens(templateSrv);
                    this.cleanup();
                }
                BoomSeries.prototype.getThresholds = function (templateSrv) {
                    var thresholds = templateSrv.replaceWithText(this.pattern.thresholds).split(",").map(function (d) { return +d; });
                    if (this.pattern.enable_time_based_thresholds) {
                        var metricrecivedTimeStamp_1 = this.currentTimeStamp || new Date();
                        var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                        var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                        lodash_1.default.each(this.pattern.time_based_thresholds, function (tbtx) {
                            if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                                (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                                (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                                (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                                tbtx.threshold) {
                                thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                            }
                        });
                    }
                    return thresholds;
                };
                BoomSeries.prototype.getBGColor = function (templateSrv) {
                    var _this = this;
                    var bgColor = "transparent";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        bgColor = this.pattern.null_color || "darkred";
                        if (this.pattern.null_color === "") {
                            bgColor = "transparent";
                        }
                    }
                    else {
                        if (this.pattern.enable_bgColor && this.pattern.bgColors) {
                            var list_of_bgColors_based_on_thresholds = templateSrv.replaceWithText(this.pattern.bgColors).split("|");
                            bgColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_bgColors_based_on_thresholds, this.value, bgColor);
                        }
                        if (this.pattern.enable_bgColor_overrides && this.pattern.bgColors_overrides !== "") {
                            var _bgColors_overrides = templateSrv.replaceWithText(this.pattern.bgColors_overrides).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                                bgColor = ("" + _bgColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(bgColor);
                };
                BoomSeries.prototype.getTextColor = function (templateSrv) {
                    var _this = this;
                    var textColor = document.body.classList.contains("theme-light") ? "black" : "white";
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        textColor = this.pattern.null_textcolor || textColor;
                    }
                    else {
                        if (this.pattern.enable_textColor && this.pattern.textColors) {
                            var list_of_textColors_based_on_thresholds = templateSrv.replaceWithText(this.pattern.textColors).split("|");
                            textColor = index_1.getItemBasedOnThreshold(this.thresholds, list_of_textColors_based_on_thresholds, this.value, textColor);
                        }
                        if (this.pattern.enable_textColor_overrides && this.pattern.textColors_overrides !== "") {
                            var _textColors_overrides = templateSrv.replaceWithText(this.pattern.textColors_overrides).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                                textColor = ("" + _textColors_overrides[0]).trim();
                            }
                        }
                    }
                    return index_1.normalizeColor(textColor);
                };
                BoomSeries.prototype.getDisplayValueTemplate = function () {
                    var _this = this;
                    var template = this.template_value;
                    if (lodash_1.default.isNaN(this.value) || this.value === null) {
                        template = this.pattern.null_value || "No data";
                        if (this.pattern.null_value === "") {
                            template = "";
                        }
                    }
                    else {
                        if (this.pattern.enable_transform) {
                            var transform_values = this.pattern.transform_values.split("|");
                            template = index_1.getItemBasedOnThreshold(this.thresholds, transform_values, this.value, template);
                        }
                        if (this.pattern.enable_transform_overrides && this.pattern.transform_values_overrides !== "") {
                            var _transform_values_overrides = this.pattern.transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === _this.value; }).map(function (con) { return con[1]; });
                            if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                                template = ("" + _transform_values_overrides[0]).trim();
                            }
                        }
                        if (this.pattern.enable_transform || this.pattern.enable_transform_overrides) {
                            template = this.seriesName.split(this.pattern.delimiter || ".").reduce(function (r, it, i) {
                                return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                            }, template);
                        }
                    }
                    return template;
                };
                BoomSeries.prototype.cleanup = function () {
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_col_name;
                        delete this.template_row_name;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper, seriesName) {
                    var row_name = pattern.row_name;
                    row_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, row_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1) {
                        row_name = seriesName;
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, seriesName, row_name) {
                    var col_name = pattern.col_name;
                    col_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                    }, col_name);
                    if (seriesName.split(pattern.delimiter || ".").length === 1 || row_name === seriesName) {
                        col_name = pattern.col_name || "Value";
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.replaceTokens = function (templateSrv) {
                    var _this = this;
                    this.link = this.seriesName.split(this.pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                    }, this.link);
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                    this.row_name = templateSrv.replaceWithText(this.row_name);
                    this.col_name = templateSrv.replaceWithText(this.col_name);
                    this.display_value = templateSrv.replaceWithText(this.display_value);
                    this.tooltip = templateSrv.replaceWithText(this.tooltip);
                    this.link = templateSrv.replaceWithText(this.link);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,