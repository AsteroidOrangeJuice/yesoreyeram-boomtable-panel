System.register(["app/core/time_series2", "lodash", "./index", "./BoomSeriesUtils", "./../GrafanaUtils"], function (exports_1, context_1) {
    "use strict";
    var time_series2_1, lodash_1, index_1, BoomSeriesUtils_1, GrafanaUtils_1, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            },
            function (BoomSeriesUtils_1_1) {
                BoomSeriesUtils_1 = BoomSeriesUtils_1_1;
            },
            function (GrafanaUtils_1_1) {
                GrafanaUtils_1 = GrafanaUtils_1_1;
            }
        ],
        execute: function () {
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options, scopedVars, templateSrv, timeSrv) {
                    this.pattern = undefined;
                    this.template_value = "";
                    this.row_col_wrapper = "_";
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    this.hidden = false;
                    this._metricname = "";
                    this._tags = [];
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs("connected");
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    this.row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : this.row_col_wrapper;
                    this.currentTimeStamp = BoomSeriesUtils_1.getCurrentTimeStamp(series.dataPoints);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id || "";
                    var getMatchingAndEnabledPattern = function (patterns, seriesName) { return patterns.find(function (p) { return seriesName.match(p.pattern) && p.disabled !== true; }); };
                    this.pattern = getMatchingAndEnabledPattern(panelPatterns, this.seriesName) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    this.value = BoomSeriesUtils_1.getSeriesValue(series, this.pattern.valueName);
                    this.display_value = (lodash_1.default.isNaN(this.value) || this.value === null) ? this.pattern.null_value : String(this.value);
                    this.value_formatted = GrafanaUtils_1.get_formatted_value(this.value, this.decimals, this.pattern.format);
                    this.display_value = String(this.value_formatted);
                    this.hidden = BoomSeriesUtils_1.doesValueNeedsToHide(this.value, this.pattern);
                    this._metricname = this.pattern.delimiter.toLowerCase() === "tag" ? index_1.getMetricNameFromTaggedAlias(seriesData.target) : "";
                    this._tags = this.pattern.delimiter.toLowerCase() === "tag" ? index_1.getLablesFromTaggedAlias(seriesData.target, this._metricname) : [];
                    this.row_name = BoomSeriesUtils_1.getRowName(this.pattern, this.row_col_wrapper, this.seriesName, this._metricname, this._tags);
                    this.row_name_raw = BoomSeriesUtils_1.getRowName(this.pattern, this.row_col_wrapper, this.seriesName, this._metricname, this._tags);
                    this.col_name = BoomSeriesUtils_1.getColName(this.pattern, this.row_col_wrapper, this.seriesName, this.row_name, this._metricname, this._tags);
                    this.thresholds = BoomSeriesUtils_1.getThresholds(templateSrv.replace(this.pattern.thresholds, scopedVars).split(",").map(function (d) { return +d; }), this.pattern, this.currentTimeStamp);
                    this.color_bg = BoomSeriesUtils_1.getBGColor(this.value, this.pattern, this.thresholds, templateSrv.replace(this.pattern.bgColors, scopedVars).split("|"), templateSrv.replace(this.pattern.bgColors_overrides, scopedVars).split("|"));
                    this.color_text = BoomSeriesUtils_1.getTextColor(this.value, this.pattern, this.thresholds, templateSrv.replace(this.pattern.textColors, scopedVars).split("|"), templateSrv.replace(this.pattern.textColors_overrides, scopedVars).split("|"));
                    this.template_value = BoomSeriesUtils_1.getDisplayValueTemplate(this.value, this.pattern, this.seriesName, this.row_col_wrapper, this.thresholds);
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = BoomSeriesUtils_1.getLink(this.pattern.enable_clickable_cells, this.pattern.clickable_cells_link, timeSrv.timeRangeForUrl());
                    this.replaceTokens(templateSrv, scopedVars, series);
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                }
                BoomSeries.prototype.replaceTokens = function (templateSrv, scopedVars, series) {
                    this.link = BoomSeriesUtils_1.replaceDelimitedColumns(this.link, this.seriesName, this.pattern.delimiter, this.row_col_wrapper);
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_raw_", "g"), series.stats.min);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.min, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_max_raw_", "g"), series.stats.max);
                    this.display_value = this.display_value.replace(new RegExp("_value_max_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.max, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_raw_", "g"), series.stats.avg);
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.avg, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_current_raw_", "g"), series.stats.current);
                    this.display_value = this.display_value.replace(new RegExp("_value_current_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.current, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_total_raw_", "g"), series.stats.total);
                    this.display_value = this.display_value.replace(new RegExp("_value_total_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.total, this.decimals, this.pattern.format));
                    if ((this.pattern.delimiter || "").toLowerCase() === "tag") {
                        this.display_value = this.display_value.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.link = this.link.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.tooltip = this.tooltip.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.display_value = index_1.replace_tags_from_field(this.display_value, this._tags);
                        this.link = index_1.replace_tags_from_field(this.link, this._tags);
                        this.tooltip = index_1.replace_tags_from_field(this.tooltip, this._tags);
                    }
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                    this.row_name = templateSrv.replace(this.row_name, scopedVars);
                    this.col_name = templateSrv.replace(this.col_name, scopedVars);
                    this.display_value = templateSrv.replace(this.display_value, scopedVars);
                    this.tooltip = templateSrv.replace(this.tooltip, scopedVars);
                    this.link = templateSrv.replace(this.link, scopedVars);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,