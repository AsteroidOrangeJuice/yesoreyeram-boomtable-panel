System.register(["app/core/time_series2", "lodash", "./index", "./../GrafanaUtils"], function (exports_1, context_1) {
    "use strict";
    var time_series2_1, lodash_1, index_1, GrafanaUtils_1, getDisplayValueTemplate, getThresholds, getBGColor, getTextColor, BoomSeries;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            },
            function (GrafanaUtils_1_1) {
                GrafanaUtils_1 = GrafanaUtils_1_1;
            }
        ],
        execute: function () {
            getDisplayValueTemplate = function (value, pattern, seriesName, row_col_wrapper, thresholds) {
                var template = "_value_";
                if (lodash_1.default.isNaN(value) || value === null) {
                    template = pattern.null_value || "No data";
                    if (pattern.null_value === "") {
                        template = "";
                    }
                }
                else {
                    template = pattern.displayTemplate || template;
                    if (pattern.enable_transform) {
                        var transform_values = pattern.transform_values.split("|");
                        template = index_1.getItemBasedOnThreshold(thresholds, transform_values, value, template);
                    }
                    if (pattern.enable_transform_overrides && pattern.transform_values_overrides !== "") {
                        var _transform_values_overrides = pattern.transform_values_overrides
                            .split("|")
                            .filter(function (con) { return con.indexOf("->"); })
                            .map(function (con) { return con.split("->"); })
                            .filter(function (con) { return +(con[0]) === value; })
                            .map(function (con) { return con[1]; });
                        if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                            template = ("" + _transform_values_overrides[0]).trim();
                        }
                    }
                    if (pattern.enable_transform || pattern.enable_transform_overrides) {
                        template = seriesName
                            .split(pattern.delimiter || ".")
                            .reduce(function (r, it, i) {
                            return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                        }, template);
                    }
                }
                return template;
            };
            getThresholds = function (templateSrv, scopedVars, pattern, currentTimeStamp) {
                var thresholds = templateSrv.replace(pattern.thresholds, scopedVars).split(",").map(function (d) { return +d; });
                if (pattern.enable_time_based_thresholds) {
                    var metricrecivedTimeStamp_1 = currentTimeStamp || new Date();
                    var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                    var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                    lodash_1.default.each(pattern.time_based_thresholds, function (tbtx) {
                        if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                            (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                            (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                            (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                            tbtx.threshold) {
                            thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                        }
                    });
                }
                return thresholds;
            };
            getBGColor = function (templateSrv, scopedVars, value, pattern, thresholds) {
                var bgColor = "transparent";
                if (lodash_1.default.isNaN(value) || value === null) {
                    bgColor = pattern.null_color || "darkred";
                    if (pattern.null_color === "") {
                        bgColor = "transparent";
                    }
                }
                else {
                    bgColor = pattern.defaultBGColor || bgColor;
                    if (pattern.enable_bgColor && pattern.bgColors) {
                        var list_of_bgColors_based_on_thresholds = templateSrv.replace(pattern.bgColors, scopedVars).split("|");
                        bgColor = index_1.getItemBasedOnThreshold(thresholds, list_of_bgColors_based_on_thresholds, value, bgColor);
                    }
                    if (pattern.enable_bgColor_overrides && pattern.bgColors_overrides !== "") {
                        var _bgColors_overrides = templateSrv.replace(pattern.bgColors_overrides, scopedVars).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                        if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                            bgColor = ("" + _bgColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(bgColor);
            };
            getTextColor = function (templateSrv, scopedVars, value, pattern, thresholds) {
                var textColor = document.body.classList.contains("theme-light") ? "black" : "white";
                if (lodash_1.default.isNaN(value) || value === null) {
                    textColor = pattern.null_textcolor || textColor;
                }
                else {
                    textColor = pattern.defaultTextColor || textColor;
                    if (pattern.enable_textColor && pattern.textColors) {
                        var list_of_textColors_based_on_thresholds = templateSrv.replace(pattern.textColors, scopedVars).split("|");
                        textColor = index_1.getItemBasedOnThreshold(thresholds, list_of_textColors_based_on_thresholds, value, textColor);
                    }
                    if (pattern.enable_textColor_overrides && pattern.textColors_overrides !== "") {
                        var _textColors_overrides = templateSrv.replace(pattern.textColors_overrides, scopedVars).split("|").filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                        if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                            textColor = ("" + _textColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(textColor);
            };
            BoomSeries = (function () {
                function BoomSeries(seriesData, panelDefaultPattern, panelPatterns, options, scopedVars, templateSrv, timeSrv) {
                    var _this = this;
                    this.display_value = "-";
                    this.tooltip = "-";
                    this.value = NaN;
                    this.value_formatted = "-";
                    this.link = "-";
                    this._metricname = "";
                    this._tags = [];
                    this.debug_mode = options && options.debug_mode === true ? true : false;
                    var nullPointMode = options && options.nullPointMode ? options.nullPointMode : "connected";
                    this.row_col_wrapper = options && options.row_col_wrapper ? options.row_col_wrapper : "_";
                    this.seriesName = "";
                    this.template_row_name = "";
                    this.template_col_name = "";
                    this.template_value = "";
                    this.hidden = false;
                    this.pattern = undefined;
                    var series = new time_series2_1.default({
                        alias: seriesData.target,
                        datapoints: seriesData.datapoints || []
                    });
                    series.flotpairs = series.getFlotPairs(nullPointMode);
                    this.seriesName = series.alias || series.aliasEscaped || series.label || series.id;
                    this.currentTimeStamp = new Date();
                    if (series.dataPoints && series.dataPoints.length > 0 && lodash_1.default.last(series.dataPoints).length === 2) {
                        this.currentTimeStamp = new Date(lodash_1.default.last(series.dataPoints)[1]);
                    }
                    this.pattern = lodash_1.default.find(panelPatterns.filter(function (p) { return p.disabled !== true; }), function (p) { return _this.seriesName.match(p.pattern); }) || panelDefaultPattern;
                    this.decimals = this.pattern.decimals || panelDefaultPattern.decimals || 2;
                    if (series.stats) {
                        if (this.pattern.valueName === "last_time") {
                            if (lodash_1.default.last(series.datapoints)) {
                                this.value = lodash_1.default.last(series.datapoints)[1];
                            }
                        }
                        else if (this.pattern.valueName === "last_time_nonnull") {
                            var non_null_data = series.datapoints.filter(function (s) { return s[0]; });
                            if (lodash_1.default.last(non_null_data) && lodash_1.default.last(non_null_data)[1]) {
                                this.value = lodash_1.default.last(non_null_data)[1];
                            }
                        }
                        else {
                            this.value = series.stats[this.pattern.valueName];
                        }
                        if (lodash_1.default.isNaN(this.value) || this.value === null) {
                            this.display_value = this.pattern.null_value;
                        }
                        else {
                            this.display_value = String(this.value);
                        }
                        if (!isNaN(this.value)) {
                            this.value_formatted = GrafanaUtils_1.get_formatted_value(this.value, this.decimals, this.pattern.format);
                            this.display_value = String(this.value_formatted);
                        }
                    }
                    if (this.value && this.pattern && this.pattern.filter && (this.pattern.filter.value_below !== "" || this.pattern.filter.value_above !== "")) {
                        if (this.pattern.filter.value_below !== "" && this.value < +(this.pattern.filter.value_below)) {
                            this.hidden = true;
                        }
                        if (this.pattern.filter.value_above !== "" && this.value > +(this.pattern.filter.value_above)) {
                            this.hidden = true;
                        }
                    }
                    if (this.pattern.delimiter.toLowerCase() === "tag") {
                        this._metricname = index_1.getMetricNameFromTaggedAlias(seriesData.target);
                        this._tags = index_1.getLablesFromTaggedAlias(seriesData.target, this._metricname);
                    }
                    this.row_name = this.getRowName(this.pattern, this.row_col_wrapper, (this.seriesName || "").toString());
                    this.row_name_raw = this.getRowName(this.pattern, this.row_col_wrapper, (this.seriesName || "").toString());
                    this.col_name = this.getColName(this.pattern, this.row_col_wrapper, (this.seriesName || "").toString(), this.row_name);
                    this.thresholds = getThresholds(templateSrv, scopedVars, this.pattern, this.currentTimeStamp);
                    this.color_bg = getBGColor(templateSrv, scopedVars, this.value, this.pattern, this.thresholds);
                    this.color_text = getTextColor(templateSrv, scopedVars, this.value, this.pattern, this.thresholds);
                    this.template_value = getDisplayValueTemplate(this.value, this.pattern, this.seriesName, this.row_col_wrapper, this.thresholds);
                    this.tooltip = this.pattern.tooltipTemplate || "Series : _series_ <br/>Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    this.link = this.pattern.enable_clickable_cells ? this.pattern.clickable_cells_link || "#" : "#";
                    if (this.link !== "#") {
                        var range = timeSrv.timeRangeForUrl();
                        this.link += (this.link.indexOf("?") > -1 ? "&from=" + range.from : "?from=" + range.from);
                        this.link += "&to=" + range.to;
                    }
                    this.replaceTokens(templateSrv, scopedVars, series);
                    this.cleanup();
                }
                BoomSeries.prototype.cleanup = function () {
                    if (this.debug_mode !== true) {
                        delete this.seriesName;
                        delete this.pattern;
                        delete this.thresholds;
                        delete this.decimals;
                        delete this.template_col_name;
                        delete this.template_row_name;
                        delete this.template_value;
                        delete this.value_formatted;
                        delete this.currentTimeStamp;
                    }
                };
                BoomSeries.prototype.getRowName = function (pattern, row_col_wrapper, seriesName) {
                    var row_name = pattern.row_name;
                    if (pattern.delimiter.toLowerCase() === "tag") {
                        row_name = row_name.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        row_name = index_1.replace_tags_from_field(row_name, this._tags);
                    }
                    else {
                        row_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                            return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                        }, row_name);
                        if (seriesName.split(pattern.delimiter || ".").length === 1) {
                            row_name = seriesName;
                        }
                    }
                    this.template_row_name = row_name;
                    return row_name;
                };
                BoomSeries.prototype.getColName = function (pattern, row_col_wrapper, seriesName, row_name) {
                    var col_name = pattern.col_name;
                    if (pattern.delimiter.toLowerCase() === "tag") {
                        col_name = col_name.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        row_name = index_1.replace_tags_from_field(col_name, this._tags);
                    }
                    else {
                        col_name = seriesName.split(pattern.delimiter || ".").reduce(function (r, it, i) {
                            return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                        }, col_name);
                        if (seriesName.split(pattern.delimiter || ".").length === 1 || row_name === seriesName) {
                            col_name = pattern.col_name || "Value";
                        }
                    }
                    this.template_col_name = col_name;
                    return col_name;
                };
                BoomSeries.prototype.replaceTokens = function (templateSrv, scopedVars, series) {
                    var _this = this;
                    this.link = this.seriesName.split(this.pattern.delimiter || ".").reduce(function (r, it, i) {
                        return r.replace(new RegExp(_this.row_col_wrapper + i + _this.row_col_wrapper, "g"), it);
                    }, this.link);
                    this.row_name = this.template_row_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.template_col_name.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.link = this.link.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_series_", "g"), this.seriesName.toString().trim());
                    this.display_value = this.template_value.replace(new RegExp("_series_", "g"), this.seriesName.toString());
                    this.col_name = this.col_name.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.link = this.link.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_row_name_", "g"), index_1.getActualNameWithoutTokens(this.row_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_row_name_", "g"), this.row_name.toString());
                    this.row_name = this.row_name.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    this.link = this.link.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.tooltip = this.tooltip.replace(new RegExp("_col_name_", "g"), index_1.getActualNameWithoutTokens(this.col_name.toString()).trim());
                    this.display_value = this.display_value.replace(new RegExp("_col_name_", "g"), this.col_name.toString());
                    var value_raw = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_raw_", "g"), value_raw);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_raw_", "g"), series.stats.min);
                    this.display_value = this.display_value.replace(new RegExp("_value_min_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.min, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_max_raw_", "g"), series.stats.max);
                    this.display_value = this.display_value.replace(new RegExp("_value_max_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.max, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_raw_", "g"), series.stats.avg);
                    this.display_value = this.display_value.replace(new RegExp("_value_avg_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.avg, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_current_raw_", "g"), series.stats.current);
                    this.display_value = this.display_value.replace(new RegExp("_value_current_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.current, this.decimals, this.pattern.format));
                    this.display_value = this.display_value.replace(new RegExp("_value_total_raw_", "g"), series.stats.total);
                    this.display_value = this.display_value.replace(new RegExp("_value_total_", "g"), GrafanaUtils_1.get_formatted_value(series.stats.total, this.decimals, this.pattern.format));
                    if ((this.pattern.delimiter || "").toLowerCase() === "tag") {
                        this.display_value = this.display_value.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.link = this.link.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.tooltip = this.tooltip.replace(new RegExp("{{metric_name}}", "g"), this._metricname);
                        this.display_value = index_1.replace_tags_from_field(this.display_value, this._tags);
                        this.link = index_1.replace_tags_from_field(this.link, this._tags);
                        this.tooltip = index_1.replace_tags_from_field(this.tooltip, this._tags);
                    }
                    var value_formatted = lodash_1.default.isNaN(this.value) || this.value === null ? "null" : this.value_formatted.toString().trim();
                    this.link = this.link.replace(new RegExp("_value_", "g"), value_formatted);
                    this.tooltip = this.tooltip.replace(new RegExp("_value_", "g"), value_formatted);
                    this.display_value = this.display_value.replace(new RegExp("_value_", "g"), value_formatted);
                    this.row_name = index_1.replaceTokens(this.row_name);
                    this.col_name = index_1.replaceTokens(this.col_name);
                    this.display_value = index_1.replaceTokens(this.display_value);
                    this.row_name = templateSrv.replace(this.row_name, scopedVars);
                    this.col_name = templateSrv.replace(this.col_name, scopedVars);
                    this.display_value = templateSrv.replace(this.display_value, scopedVars);
                    this.tooltip = templateSrv.replace(this.tooltip, scopedVars);
                    this.link = templateSrv.replace(this.link, scopedVars);
                };
                return BoomSeries;
            }());
            exports_1("BoomSeries", BoomSeries);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,