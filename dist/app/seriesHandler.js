System.register(["lodash", "app/core/utils/kbn", "app/core/time_series2", "./utils"], function (exports_1, context_1) {
    "use strict";
    var lodash_1, kbn_1, time_series2_1, utils, ___transformValue, ___computeColorFromThresholds, ___getServerTimestamp, defaultHandler, getPattern, getRowName, getColName, getThresholds, assignValue, filterValues, getFilteredSeries, getDisplayValueOverride, getBgColor, getOverridedBGColor, getTextColor, getOverridedTextColor, applyFontAwesomeIcons, applyImageTransform, assignClickableLinks, compute;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (kbn_1_1) {
                kbn_1 = kbn_1_1;
            },
            function (time_series2_1_1) {
                time_series2_1 = time_series2_1_1;
            },
            function (utils_1) {
                utils = utils_1;
            }
        ],
        execute: function () {
            ___transformValue = function (thresholds, transform_values, value, displayValue, row_name, col_name) {
                var t = value;
                if (thresholds && transform_values && typeof value === "number" && thresholds.length + 1 <= transform_values.length) {
                    transform_values = lodash_1.default.dropRight(transform_values, transform_values.length - thresholds.length - 1);
                    if (transform_values[transform_values.length - 1] === "") {
                        transform_values[transform_values.length - 1] = "_value_";
                    }
                    for (var i = thresholds.length; i > 0; i--) {
                        if (value >= thresholds[i - 1]) {
                            var o_1 = transform_values[i];
                            o_1 = o_1.replace(new RegExp("_value_", "g"), String(displayValue));
                            o_1 = o_1.replace(new RegExp("_row_name_", "g"), String(row_name));
                            o_1 = o_1.replace(new RegExp("_col_name_", "g"), String(col_name));
                            return o_1;
                        }
                    }
                    var o = lodash_1.default.first(transform_values) || "";
                    o = o.replace(new RegExp("_value_", "g"), String(displayValue));
                    o = o.replace(new RegExp("_row_name_", "g"), String(row_name));
                    o = o.replace(new RegExp("_col_name_", "g"), String(col_name));
                    return o;
                }
                return String(t);
            };
            ___computeColorFromThresholds = function (thresholds, bgColors, value, defaultColor) {
                var c = defaultColor;
                if (thresholds && bgColors && typeof value === "number" && thresholds.length + 1 <= bgColors.length) {
                    bgColors = lodash_1.default.dropRight(bgColors, bgColors.length - thresholds.length - 1);
                    if (bgColors[bgColors.length - 1] === "") {
                        bgColors[bgColors.length - 1] = defaultColor;
                    }
                    for (var i = thresholds.length; i > 0; i--) {
                        if (value >= thresholds[i - 1]) {
                            return utils.normalizeColor(bgColors[i]);
                        }
                    }
                    return utils.normalizeColor(lodash_1.default.first(bgColors));
                }
                return c;
            };
            ___getServerTimestamp = function (series) {
                var current_servertimestamp = new Date();
                if (series && series.datapoints && series.datapoints.length > 0) {
                    if (lodash_1.default.last(series.datapoints).length === 2) {
                        current_servertimestamp = new Date(lodash_1.default.last(series.datapoints)[1]);
                    }
                }
                return current_servertimestamp;
            };
            defaultHandler = function (seriesData) {
                var series = new time_series2_1.default({
                    datapoints: seriesData.datapoints || [],
                    alias: seriesData.target
                });
                series.flotpairs = series.getFlotPairs("connected");
                return series;
            };
            exports_1("defaultHandler", defaultHandler);
            getPattern = function (patterns, defaultPattern, alias) {
                var activePatterns = patterns.filter(function (p) { return p.disabled !== true; });
                var matchingPattern = lodash_1.default.find(activePatterns, function (p) {
                    return alias.match(p.pattern);
                });
                return matchingPattern || defaultPattern;
            };
            getRowName = function (alias, pattern, defaultPattern, row_col_wrapper) {
                var row_name = alias.split(String(pattern.delimiter) || ".").reduce(function (r, it, i) {
                    return r.replace(new RegExp(String(row_col_wrapper) + i + String(row_col_wrapper), "g"), it);
                }, pattern.row_name.replace(new RegExp(row_col_wrapper + "series" + row_col_wrapper, "g"), String(alias)) || defaultPattern.row_name.replace(new RegExp(row_col_wrapper + "series" + row_col_wrapper, "g"), String(alias)));
                if (alias.split(String(pattern.delimiter) || ".").length === 1) {
                    row_name = String(alias);
                }
                return row_name;
            };
            getColName = function (alias, row_name, pattern, defaultPattern, row_col_wrapper) {
                var col_name = alias.split(String(pattern.delimiter) || ".").reduce(function (r, it, i) {
                    return r.replace(new RegExp(String(row_col_wrapper) + i + String(row_col_wrapper), "g"), it);
                }, pattern.col_name || defaultPattern.col_name);
                if (alias.split(String(pattern.delimiter) || ".").length === 1 || row_name === alias) {
                    col_name = pattern.col_name || "Value";
                }
                return col_name;
            };
            getThresholds = function (pattern, defaultPattern, current_servertimestamp) {
                var thresholds = (pattern.thresholds || defaultPattern.thresholds).split(",").map(function (d) { return +d; });
                if (pattern.enable_time_based_thresholds) {
                    var metricrecivedTimeStamp_1 = current_servertimestamp || new Date();
                    var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                    var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                    lodash_1.default.each(pattern.time_based_thresholds, function (tbtx) {
                        if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                            (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                            (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                            (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                            tbtx.threshold) {
                            thresholds = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                        }
                    });
                }
                return thresholds;
            };
            assignValue = function (series, defaultPattern) {
                if (series.stats) {
                    series.value = series.stats[String(series.pattern.valueName) || String(defaultPattern.valueName)];
                    var decimalInfo = utils.getDecimalsForValue(series.value, +(series.decimals));
                    var formatFunc = kbn_1.default.valueFormats[String(series.pattern.format) || String(defaultPattern.format)];
                    if (series.value === null) {
                        series.displayValue = series.pattern.null_value || defaultPattern.null_value || "Null";
                    }
                    else if (!isNaN(series.value)) {
                        series.valueFormatted = formatFunc(series.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                        series.valueRounded = kbn_1.default.roundValue(series.value, decimalInfo.decimals);
                        series.displayValue = series.valueFormatted;
                    }
                    else {
                        series.displayValue = series.pattern.null_value || defaultPattern.null_value || "Null";
                    }
                }
                return series;
            };
            filterValues = function (series) {
                if (!series.pattern.filter) {
                    series.pattern.filter = {
                        value_below: "",
                        value_above: ""
                    };
                }
                if (series.pattern && series.pattern.filter && (series.pattern.filter.value_below !== "" || series.pattern.filter.value_above !== "")) {
                    if (series.pattern.filter.value_below !== "" && series.value < +(series.pattern.filter.value_below)) {
                        return false;
                    }
                    if (series.pattern.filter.value_above !== "" && series.value > +(series.pattern.filter.value_above)) {
                        return false;
                    }
                    return true;
                }
                else {
                    return true;
                }
            };
            getFilteredSeries = function (seriesArray) {
                var newSeries = [];
                lodash_1.default.each(seriesArray, function (series) {
                    if (filterValues(series)) {
                        newSeries.push(series);
                    }
                });
                return newSeries;
            };
            getDisplayValueOverride = function (transform_values_overrides, value, row_name, col_name, displayValue) {
                var _transform_values_overrides = transform_values_overrides.split("|").filter(function (con) { return con.indexOf("->") > -1; }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                    displayValue = ("" + _transform_values_overrides[0]).trim().replace(new RegExp("_value_", "g"), String(displayValue)).replace(new RegExp("_row_name_", "g"), String(row_name)).replace(new RegExp("_col_name_", "g"), String(col_name));
                }
                return displayValue;
            };
            getBgColor = function (pattern, defaultPattern, enable_bgColor, thresholds, bgColors, value, displayValue) {
                var bgColor = enable_bgColor === true ? ___computeColorFromThresholds(thresholds, bgColors, value, "transparent") : "transparent";
                if (displayValue === (pattern.null_value || defaultPattern.null_value || "Null")) {
                    bgColor = pattern.null_color || defaultPattern.null_color || "transparent";
                }
                return bgColor;
            };
            getOverridedBGColor = function (bgColors_overrides, value, defaultBGColor) {
                var bgColor = defaultBGColor;
                var _bgColors_overrides = bgColors_overrides.split("|").filter(function (con) { return con.indexOf("->") > -1; }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                    bgColor = utils.normalizeColor(("" + _bgColors_overrides[0]).trim());
                }
                return bgColor;
            };
            getTextColor = function (pattern, defaultPattern, enable_TextColors, thresholds, textColors, value, displayValue) {
                var textColor = enable_TextColors === true ? ___computeColorFromThresholds(thresholds, textColors, value, "white") : "white";
                if (displayValue === (pattern.null_value || defaultPattern.null_value || "Null")) {
                    textColor = pattern.null_text_color || defaultPattern.null_text_color || "white";
                }
                return textColor;
            };
            getOverridedTextColor = function (textColors_overrides, value, defaulttextColor) {
                var textColor = defaulttextColor;
                var _textColors_overrides = textColors_overrides.split("|").filter(function (con) { return con.indexOf("->") > -1; }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                    textColor = utils.normalizeColor(("" + _textColors_overrides[0]).trim());
                }
                return textColor;
            };
            applyFontAwesomeIcons = function (series) {
                series.actual_displayvalue = series.displayValue;
                series.actual_row_name = series.row_name;
                series.actual_col_name = series.col_name;
                if (series.displayValue && series.displayValue.indexOf("_fa-") > -1) {
                    series.displayValue = utils.replaceFontAwesomeIcons(series.displayValue);
                }
                if (series.row_name && series.row_name.indexOf("_fa-") > -1) {
                    series.row_name = utils.replaceFontAwesomeIcons(series.row_name);
                }
                if (series.col_name && series.col_name.indexOf("_fa-") > -1) {
                    series.col_name = utils.replaceFontAwesomeIcons(series.col_name);
                }
                return series;
            };
            applyImageTransform = function (series) {
                if (series.displayValue && series.displayValue.indexOf("_img-") > -1) {
                    series.displayValue = utils.replaceWithImages(series.displayValue);
                }
                if (series.row_name && series.row_name.indexOf("_img-") > -1) {
                    series.row_name = utils.replaceWithImages(series.row_name);
                }
                if (series.col_name && series.col_name.indexOf("_img-") > -1) {
                    series.col_name = utils.replaceWithImages(series.col_name);
                }
                return series;
            };
            assignClickableLinks = function (series) {
                if (series.pattern.enable_clickable_cells) {
                    var targetLink = series.pattern.clickable_cells_link || "#";
                    targetLink = targetLink.replace(new RegExp("_row_name_", "g"), utils.getActualNameWithoutTransformSign(series.actual_row_name).trim());
                    targetLink = targetLink.replace(new RegExp("_col_name_", "g"), utils.getActualNameWithoutTransformSign(series.actual_col_name).trim());
                    targetLink = targetLink.replace(new RegExp("_value_", "g"), utils.getActualNameWithoutTransformSign(series.value).trim());
                    series.displayValue = "<a href=\"" + targetLink + "\" target=\"_blank\">" + series.displayValue + "</a>";
                }
                return series;
            };
            compute = function (dataComputed, defaultPattern, patterns, row_col_wrapper) {
                dataComputed = dataComputed.map(function (series) {
                    series.pattern = getPattern(patterns, defaultPattern, series.alias);
                    series.decimals = series.pattern.decimals || defaultPattern.decimals;
                    return series;
                });
                dataComputed = dataComputed.map(function (series) { return assignValue(series, defaultPattern); });
                dataComputed = getFilteredSeries(dataComputed);
                dataComputed = dataComputed.map(function (series) {
                    series.row_name = getRowName(series.alias, series.pattern, defaultPattern, row_col_wrapper);
                    series.col_name = getColName(series.alias, series.row_name, series.pattern, defaultPattern, row_col_wrapper);
                    series.key_name = series.row_name + "#" + series.col_name;
                    series.thresholds = getThresholds(series.pattern, defaultPattern, ___getServerTimestamp(series));
                    series.enable_bgColor = series.pattern.enable_bgColor;
                    series.bgColors = (series.pattern.bgColors || defaultPattern.bgColors || "").split("|");
                    series.bgColor = getBgColor(series.pattern, defaultPattern, series.enable_bgColor, series.thresholds, series.bgColors, series.value, series.displayValue);
                    series.enable_bgColor_overrides = series.pattern.enable_bgColor_overrides;
                    series.bgColors_overrides = series.pattern.bgColors_overrides || "";
                    if (series.enable_bgColor_overrides && series.bgColors_overrides !== "") {
                        series.bgColor = getOverridedBGColor(series.bgColors_overrides, series.value, series.bgColor);
                    }
                    series.enable_TextColors = series.pattern.enable_TextColors;
                    series.textColors = (series.pattern.textColors || defaultPattern.textColors || "").split("|");
                    series.textColor = getTextColor(series.pattern, defaultPattern, series.enable_TextColors, series.thresholds, series.textColors, series.value, series.displayValue);
                    series.enable_TextColor_overrides = series.pattern.enable_TextColor_overrides;
                    series.textColors_overrides = series.pattern.textColors_overrides || "";
                    if (series.enable_TextColor_overrides && series.textColors_overrides !== "") {
                        series.textColor = getOverridedTextColor(series.textColors_overrides, series.value, series.textColor);
                    }
                    series.enable_transform = series.pattern.enable_transform;
                    series.transform_values = (series.pattern.transform_values || defaultPattern.transform_values).split("|");
                    series.displayValue = series.enable_transform === true ? ___transformValue(series.thresholds, series.transform_values, series.value, series.displayValue, series.row_name, series.col_name) : series.displayValue;
                    if (series.displayValue === (series.pattern.null_value || defaultPattern.null_value || "Null")) {
                        series.displayValue = series.pattern.null_value || defaultPattern.null_value;
                    }
                    else if (isNaN(series.value)) {
                        series.displayValue = series.pattern.null_value || defaultPattern.null_value;
                    }
                    series.enable_transform_overrides = series.pattern.enable_transform_overrides;
                    series.transform_values_overrides = series.pattern.transform_values_overrides || "";
                    if (series.enable_transform_overrides && series.transform_values_overrides !== "") {
                        series.displayValue = getDisplayValueOverride(series.transform_values_overrides, series.value, series.row_name, series.col_name, series.displayValue);
                    }
                    series.tooltipTemplate = series.pattern.tooltipTemplate || defaultPattern.tooltipTemplate || "Row Name : _row_name_ <br/>Col Name : _col_name_ <br/>Value : _value_";
                    return series;
                });
                dataComputed = dataComputed.map(function (series) { return applyFontAwesomeIcons(series); });
                dataComputed = dataComputed.map(function (series) { return applyImageTransform(series); });
                dataComputed = dataComputed.map(function (series) { return assignClickableLinks(series); });
                return dataComputed;
            };
            exports_1("compute", compute);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,