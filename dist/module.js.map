{"version":3,"sources":["../src/module.js"],"names":["loadPluginCss","MetricsPanelCtrl","TimeSeries","config","list_of_stylesheets","GrafanaBoomTableCtrl","$scope","$injector","$sce","_","defaults","panel","panelDefaults","events","on","onDataReceived","bind","onInitEditMode","valueNameOptions","each","editorTabs","addEditorTab","editor","name","plugin_id","template","position","data","dataReceived","render","seriesData","series","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","newPattern","pattern","delimiter","valueName","row_name","col_name","patterns","push","activePatternIndex","length","index","splice","prototype","console","log","dataComputed","map","seriesHandler","find","concat","defaultPattern","p","match","value","stats","split","reduce","r","it","i","replace","RegExp","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,mB,WAAAA,a;AACAC,sB,WAAAA,gB;AACAC,gB,WAAAA,U;AACAC,Y,WAAAA,M;;;;;;;;;;;;;;;;;;;;;AAGFH,oBAAcG,OAAOC,mBAArB;;2BAEMC,oB;;;AACJ,sCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqC;AAAA;;AAAA,kJAC7BF,MAD6B,EACrBC,SADqB;;AAEnCE,YAAEC,QAAF,CAAW,MAAKC,KAAhB,EAAuBR,OAAOS,aAA9B;AACA,gBAAKC,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,cAAL,CAAoBD,IAApB,OAAjC;AAJmC;AAKpC;;;;2CACgB;AAAA;;AACf,iBAAKE,gBAAL,GAAwBf,OAAOe,gBAA/B;AACAT,cAAEU,IAAF,CAAOhB,OAAOiB,UAAd,EAA0B,kBAAU;AAClC,qBAAKC,YAAL,CAAkBC,OAAOC,IAAzB,EAA+B,oBAAoBpB,OAAOqB,SAA3B,GAAuCF,OAAOG,QAA7E,EAAuFH,OAAOI,QAA9F;AACD,aAFD;AAGD;;;yCACcC,I,EAAM;AACnB,iBAAKC,YAAL,GAAoBD,IAApB;AACA,iBAAKE,MAAL;AACD;;;wCACaC,U,EAAY;AACxB,gBAAIC,SAAS,IAAI7B,UAAJ,CAAe;AAC1B8B,0BAAYF,WAAWE,UAAX,IAAyB,EADX;AAE1BC,qBAAOH,WAAWI;AAFQ,aAAf,CAAb;AAIAH,mBAAOI,SAAP,GAAmBJ,OAAOK,YAAP,CAAoB,KAAKzB,KAAL,CAAW0B,aAA/B,CAAnB;AACA,mBAAON,MAAP;AACD;;;uCACY;AACX,gBAAIO,aAAa;AACfC,uBAAS,eADM;AAEfC,yBAAW,GAFI;AAGfC,yBAAW,KAHI;AAIfC,wBAAU,KAJK;AAKfC,wBAAU;AALK,aAAjB;AAOA,iBAAKhC,KAAL,CAAWiC,QAAX,CAAoBC,IAApB,CAAyBP,UAAzB;AACA,iBAAK3B,KAAL,CAAWmC,kBAAX,GAAgC,KAAKnC,KAAL,CAAWiC,QAAX,CAAoBG,MAApB,GAA6B,CAA7D;AACA,iBAAKlB,MAAL;AACD;;;wCACamB,K,EAAO;AACnB,iBAAKrC,KAAL,CAAWiC,QAAX,CAAoBK,MAApB,CAA2BD,KAA3B,EAAkC,CAAlC;AACA,iBAAKrC,KAAL,CAAWmC,kBAAX,GAAgC,CAAC,CAAjC;AACD;;;;QAxCgC7C,gB;;AA2CnCI,2BAAqB6C,SAArB,CAA+BrB,MAA/B,GAAwC,YAAY;AAAA;;AAClD,YAAI,KAAKD,YAAT,EAAuB;AACrBuB,kBAAQC,GAAR,CAAY,WAAZ;AACA;AACA,eAAKC,YAAL,GAAoB,KAAKzB,YAAL,CAAkB0B,GAAlB,CAAsB,KAAKC,aAAL,CAAmBvC,IAAnB,CAAwB,IAAxB,CAAtB,CAApB;AACA;AACA,eAAKqC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,GAAlB,CAAsB,kBAAU;AAClDvB,mBAAOQ,OAAP,GAAiB9B,EAAE+C,IAAF,CAAO,OAAK7C,KAAL,CAAWiC,QAAX,CAAoBa,MAApB,CAA2B,OAAK9C,KAAL,CAAW+C,cAAtC,CAAP,EAA8D,UAAUC,CAAV,EAAa;AAC1F,qBAAO5B,OAAOE,KAAP,CAAa2B,KAAb,CAAmBD,EAAEpB,OAAF,IAAa,EAAhC,CAAP;AACD,aAFgB,CAAjB;AAGA,mBAAOR,MAAP;AACD,WALmB,CAApB;AAMA;AACA,eAAKsB,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,GAAlB,CAAsB,kBAAU;AAClDvB,mBAAO8B,KAAP,GAAe9B,OAAO+B,KAAP,CAAa/B,OAAOQ,OAAP,CAAeE,SAAf,IAA4B,KAAzC,KAAmD,KAAlE;AACA,mBAAOV,MAAP;AACD,WAHmB,CAApB;AAIA;AACA,eAAKsB,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,GAAlB,CAAsB,kBAAU;AAClDvB,mBAAOW,QAAP,GAAkBX,OAAOE,KAAP,CAAa8B,KAAb,CAAmBhC,OAAOQ,OAAP,CAAeC,SAAf,IAA4B,GAA/C,EAAoDwB,MAApD,CAA2D,UAACC,CAAD,EAAIC,EAAJ,EAAQC,CAAR,EAAc;AACzF,qBAAOF,EAAEG,OAAF,CAAU,IAAIC,MAAJ,CAAW,MAAMF,CAAN,GAAU,GAArB,EAA0B,GAA1B,CAAV,EAA0CD,EAA1C,CAAP;AACD,aAFiB,EAEfnC,OAAOQ,OAAP,CAAeG,QAAf,IAA2BvC,OAAOS,aAAP,CAAqB8C,cAArB,CAAoChB,QAFhD,CAAlB;AAGA,mBAAOX,MAAP;AACD,WALmB,CAApB;AAMA;AACA,eAAKsB,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,GAAlB,CAAsB,kBAAU;AAClDvB,mBAAOY,QAAP,GAAkBZ,OAAOE,KAAP,CAAa8B,KAAb,CAAmBhC,OAAOQ,OAAP,CAAeC,SAAf,IAA4B,GAA/C,EAAoDwB,MAApD,CAA2D,UAACC,CAAD,EAAIC,EAAJ,EAAQC,CAAR,EAAc;AACzF,qBAAOF,EAAEG,OAAF,CAAU,IAAIC,MAAJ,CAAW,MAAMF,CAAN,GAAU,GAArB,EAA0B,GAA1B,CAAV,EAA0CD,EAA1C,CAAP;AACD,aAFiB,EAEfnC,OAAOQ,OAAP,CAAeI,QAAf,IAA2BxC,OAAOS,aAAP,CAAqB8C,cAArB,CAAoCf,QAFhD,CAAlB;AAGA,mBAAOZ,MAAP;AACD,WALmB,CAApB;AAMA;AACA,eAAKpB,KAAL,CAAWgB,IAAX,GAAkB,KAAK0B,YAAvB;AACD;AACF,OAlCD;;AAoCAhD,2BAAqBiE,WAArB,GAAmC,sBAAnC;;2BAGEjE,oB","file":"module.js","sourcesContent":["import {\r\n  loadPluginCss,\r\n  MetricsPanelCtrl,\r\n  TimeSeries,\r\n  config\r\n} from \"./app/app\"\r\n\r\nloadPluginCss(config.list_of_stylesheets);\r\n\r\nclass GrafanaBoomTableCtrl extends MetricsPanelCtrl {\r\n  constructor($scope, $injector, $sce) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, config.panelDefaults);\r\n    this.events.on(\"data-received\", this.onDataReceived.bind(this));\r\n    this.events.on(\"init-edit-mode\", this.onInitEditMode.bind(this));\r\n  }\r\n  onInitEditMode() {\r\n    this.valueNameOptions = config.valueNameOptions;\r\n    _.each(config.editorTabs, editor => {\r\n      this.addEditorTab(editor.name, \"public/plugins/\" + config.plugin_id + editor.template, editor.position);\r\n    })\r\n  }\r\n  onDataReceived(data) {\r\n    this.dataReceived = data;\r\n    this.render();\r\n  }\r\n  seriesHandler(seriesData) {\r\n    var series = new TimeSeries({\r\n      datapoints: seriesData.datapoints || [],\r\n      alias: seriesData.target\r\n    });\r\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n    return series;\r\n  }\r\n  addPattern() {\r\n    var newPattern = {\r\n      pattern: \"^server.*cpu$\",\r\n      delimiter: \".\",\r\n      valueName: \"avg\",\r\n      row_name: \"_0_\",\r\n      col_name: \"_1_\"\r\n    };\r\n    this.panel.patterns.push(newPattern);\r\n    this.panel.activePatternIndex = this.panel.patterns.length - 1;\r\n    this.render();\r\n  }\r\n  removePattern(index) {\r\n    this.panel.patterns.splice(index, 1);\r\n    this.panel.activePatternIndex = -1;\r\n  }\r\n}\r\n\r\nGrafanaBoomTableCtrl.prototype.render = function () {\r\n  if (this.dataReceived) {\r\n    console.log(\"Rendering\");\r\n    // Binding the grafana computations to the metrics received\r\n    this.dataComputed = this.dataReceived.map(this.seriesHandler.bind(this));\r\n    // Assign pattern\r\n    this.dataComputed = this.dataComputed.map(series => {\r\n      series.pattern = _.find(this.panel.patterns.concat(this.panel.defaultPattern), function (p) {\r\n        return series.alias.match(p.pattern || \"\");\r\n      });\r\n      return series;\r\n    });\r\n    // Assign value\r\n    this.dataComputed = this.dataComputed.map(series => {\r\n      series.value = series.stats[series.pattern.valueName || \"avg\"] || \"N/A\";\r\n      return series;\r\n    });\r\n    // Assign Row Name\r\n    this.dataComputed = this.dataComputed.map(series => {\r\n      series.row_name = series.alias.split(series.pattern.delimiter || \".\").reduce((r, it, i) => {\r\n        return r.replace(new RegExp(\"_\" + i + \"_\", \"g\"), it)\r\n      }, series.pattern.row_name || config.panelDefaults.defaultPattern.row_name);\r\n      return series;\r\n    });\r\n    // Assign Col Name\r\n    this.dataComputed = this.dataComputed.map(series => {\r\n      series.col_name = series.alias.split(series.pattern.delimiter || \".\").reduce((r, it, i) => {\r\n        return r.replace(new RegExp(\"_\" + i + \"_\", \"g\"), it)\r\n      }, series.pattern.col_name || config.panelDefaults.defaultPattern.col_name);\r\n      return series;\r\n    });\r\n    // Assigning computed data to output panel\r\n    this.panel.data = this.dataComputed;\r\n  }\r\n};\r\n\r\nGrafanaBoomTableCtrl.templateUrl = \"partials/module.html\";\r\n\r\nexport {\r\n  GrafanaBoomTableCtrl as PanelCtrl\r\n};"]}